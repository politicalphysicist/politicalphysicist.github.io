<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>The Political Physicist</title><link href="https://politicalphysicist.github.io/" rel="alternate"></link><link href="https://politicalphysicist.github.io/feeds/computers.atom.xml" rel="self"></link><id>https://politicalphysicist.github.io/</id><updated>2015-05-17T10:30:00+01:00</updated><entry><title>Blog, Rebooted</title><link href="https://politicalphysicist.github.io/blog-rebooted.html" rel="alternate"></link><published>2015-05-17T10:30:00+01:00</published><updated>2015-05-17T10:30:00+01:00</updated><author><name>C. MacMackin</name></author><id>tag:politicalphysicist.github.io,2015-05-17:blog-rebooted.html</id><summary type="html">&lt;p&gt;&lt;img alt='The silhouette of a "dreaming spire" in Oxford. A larger version of my new favicon.' src="https://politicalphysicist.github.io/images/spire-smaller.png"/&gt;
For awhile now I’ve been meaning to create a new theme for my blog. Previously
I was using a modified version of the
&lt;a href="https://github.com/getpelican/pelican-themes/tree/master/gum"&gt;Gum theme&lt;/a&gt;, but
I wanted one which was all my own. I also decided that I wanted a distinctly
different look for my blog, using serif fonts and darker colours. Years of
procrastination finally came to an end when I knew that I would need to design
such a theme for a professional website (I’ll post more on that once it’s
finished) and thought I might as well design a similar blog theme while I was
at it. You can find the theme
&lt;a href="https://github.com/cmacmackin/backdrop-theme"&gt;on GitHub&lt;/a&gt;.
You may also notice
that I have a new favicon (shown here at higher resolution). This is the
silhouette of one of Oxford’s many “dreaming spires.” For those of you who
don’t know, I’ll be starting my graduate studies at Oxford this fall. As I quite
like Oxford’s nickname as “the city of dreaming spires,” I decided that
this would be a nice symbol for my blog. Incidentally, that silhouette was
traced from the image to the right (or on the bottom, depending on your screen size).&lt;/p&gt;
&lt;p&gt;While I was at it, I got around to updating various pages on this website. I
have added a more detailed About page, provided an up-to-date listing of
software that I have written, and changed the Technical page to more accurately
represent how the blog now works. I have also reorganized the categories I give
articles, eliminating the two which had the fewest articles. As a note, those
articles were not deleted—simply folded into other categories. The main
motivation for this was simply to ensure that everything fit well on the
navigation bar. Next year I will be moving back into residence for grad school
and thus won’t be able to run a server on which to host my blog. In preparation
for this, I decided to move it to GitHub pages. This will likely also be (at
least temporarily) the host of my professional website, once it is completed.&lt;/p&gt;
&lt;p&gt;Most importantly, I decided to change the name of my blog from &lt;em&gt;Red Shades of
Green&lt;/em&gt;. I had originally chosen that title in order to reflect that I was
concerned about the environment, but that I was a bit of a pinko. Since then,
I feel that I have become much more stridently left-wing and, at the same time,
have lost a certain amount of patience with the environmental movement and the
behaviour of ecosocialists. Not to say that I care about the environment any
less; I simply take a different approach to the issue than I used to&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;.
One which is more firmly pro-technology. And one which integrates environmental
issues into socialism, rather than the other way around. I suppose these days
a more accurate title would be &lt;em&gt;Green Shades of Red&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Instead I went with &lt;em&gt;The Political Physicist&lt;/em&gt;. At risk of explaining the
obvious, this is a play on political science. As a scientist (well, a student
scientist) who cares deeply about politics, you might say that I’m a political
scientist. However, this makes it sound like I study political science, rather
than physics. And the rest, as they say, is history.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Relativity is a communist conspiracy. Of course, as it happens, Einstein actually _was_ a socialist." class="img-center" src="https://politicalphysicist.github.io/images/SocialistRelativity.png"/&gt;&lt;/p&gt;
&lt;p&gt;But while the appearance, location, and name of my blog has changed, none of the
content has really. I will still write my extremely biased political articles.
I will still complain about petty things, like the use of the phrase “growing
exponentially,” and I’ll still write in great detail about programming and
software despite the fact that most of my audience can’t understand a thing I
say about it. Even as I prepare to travel across the ocean to spend the next
three years in grad school, studying a totally different branch of physics from
what I have so far, I am still essentially the same person and that fact is
reflected here. As I enter this new chapter of my life, I invite you all to
share the adventure with me, knowing that, in all probability, at the end of it
I will be just as neurotic, pedantic, and idealistic as I am today.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr/&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;And have come to accept that I will never quite see eye-to-eye with ecosocialists on a number of issues. &lt;a class="footnote-backref" href="#fnref:1" rev="footnote" title="Jump back to footnote 1 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</summary><category term="Blogging"></category><category term="HTML"></category><category term="CSS"></category><category term="Foundation"></category><category term="Pelican"></category></entry><entry><title>FORD: FORtran Documentation</title><link href="https://politicalphysicist.github.io/ford-fortran-documentation.html" rel="alternate"></link><published>2015-01-05T00:15:00+00:00</published><updated>2015-01-05T00:15:00+00:00</updated><author><name>C. MacMackin</name></author><id>tag:politicalphysicist.github.io,2015-01-05:ford-fortran-documentation.html</id><summary type="html">&lt;p&gt;Over Christmas break I’ve been working on this project to produce documentation
for Fortran programs. I’ve (just) managed to finish it before school starts
again! Here is the &lt;span class="caps"&gt;README&lt;/span&gt; for it, containing the documentation which I wrote.
You can find the code &lt;a href="https://github.com/cmacmackin/ford"&gt;on Github&lt;/a&gt;.&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;This is an automatic documentation generator for modern Fortran programs.
&lt;span class="caps"&gt;FORD&lt;/span&gt; stands for FORtran Documenter. As you may know, “to ford” refers to
crossing a river (or other body of water). It does not, in this context, refer
to any company or individual associated with cars.&lt;/p&gt;
&lt;p&gt;Ford was written due to &lt;a href="http://www.stack.nl/~dimitri/doxygen/"&gt;Doxygen&lt;/a&gt;‘s
poor handling of Fortran and the lack of comparable alternatives.
&lt;a href="http://rfsber.home.xs4all.nl/Robo/index.html"&gt;ROBODoc&lt;/a&gt; can’t actually extract
any information from the source code and just about any other automatic
documentation software I found was either proprietary, didn’t work very well
for Fortran, or was limited in terms of how it produced its output.
&lt;a href="http://erikdemaine.org/software/f90doc/"&gt;f90doc&lt;/a&gt; is quite good and I managed
to modify it so that it could handle most of Fortran 2003, but it produces
rather ugly documentation, can’t provide as many links between different parts
of the documentation as I’d like, and is written in Perl (which I’m not that
familiar with and which lacks the sort of libraries found in Python for
producing &lt;span class="caps"&gt;HTML&lt;/span&gt; content).&lt;/p&gt;
&lt;p&gt;The goal of &lt;span class="caps"&gt;FORD&lt;/span&gt; is to be able to reliably produce documentation for modern
Fortran software which is informative and nice to look at. The documentation
should be easy to write and non-obtrusive within the code. While it will never
be as feature-rich as Doxygen, hopefully &lt;span class="caps"&gt;FORD&lt;/span&gt; will be able to provide an
alternative for documenting Fortran projects.&lt;/p&gt;
&lt;h3&gt;Disclaimer&lt;/h3&gt;
&lt;p&gt;This is a young project. While it has bee tested somewhat, the testing has been
far from comprehensive. Various options have not been tested and obscure uses
of the Fortran syntax could still potentially cause &lt;span class="caps"&gt;FORD&lt;/span&gt; to crash. If you
get an error message while processing a file, first check to make sure that the
file actually compiles. No effort has been made to be able to process files
which contain syntax errors. Next ensure that you aren’t using any of the
lingering &lt;span class="caps"&gt;FORTRAN77&lt;/span&gt; syntax. If you are still experiencing errors, comment
out the &lt;code&gt;try&lt;/code&gt;/&lt;code&gt;except&lt;/code&gt; statement on lines 59-63 of
./ford/fortran_project.py. Leave only line 60 uncommented. You will probably
need to remove four spaces from line 60’s indentation, as well.
This will give you
a proper Python backtrace. Submit a bug report on this Github page, including
the backtrace and, if possible, the file which &lt;span class="caps"&gt;FORD&lt;/span&gt; crashed while processing.
If an error occurs elsewhere, you will most likely get a backtrace by default.
Once again, please include this backtrace in your bug report.&lt;/p&gt;
&lt;h3&gt;Dependencies&lt;/h3&gt;
&lt;p&gt;In addition to the standard Python libraries, the following modules are needed:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://jinja.pocoo.org/docs/dev/"&gt;Jinja2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pygments.org/"&gt;Pygments&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.python.org/pypi/toposort/1.0"&gt;toposort&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pythonhosted.org/Markdown/"&gt;Markdown&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A near-term goal will be to write a setup script which will check for
these dependencies and install those which are missing. I’d also like to
make &lt;span class="caps"&gt;FORD&lt;/span&gt; available on PyPI so that all dependencies will be installed automatically.&lt;/p&gt;
&lt;h3&gt;Basic Usage&lt;/h3&gt;
&lt;p&gt;&lt;span class="caps"&gt;FORD&lt;/span&gt; usage is based on &lt;em&gt;projects&lt;/em&gt;. A project is just whatever piece of software
you want to document. Normally it would either be a program or a library. Each
project will have its own
&lt;a href="http://daringfireball.net/projects/markdown/syntax"&gt;Markdown&lt;/a&gt; file which
contains a description of the project. Various options (see below for a
description) can be specified in this file, such as where to look for your
projects source files, where to output the documentation, and information about
the author.&lt;/p&gt;
&lt;h4&gt;Running Ford&lt;/h4&gt;
&lt;p&gt;Once you have written a project file which you’re satisfied with, it is time to
run &lt;span class="caps"&gt;FORD&lt;/span&gt;. Make sure that it is in the path/Python-path. The most basic syntax
for running ford is just&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ford project-file.md
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Assuming that there are no errors, your documentation will now be available
in the path you indicated for output.&lt;/p&gt;
&lt;h4&gt;Writing Documentation&lt;/h4&gt;
&lt;p&gt;All documentation, both that provided within the source files and that given
in the project file, should be written in
&lt;a href="http://daringfireball.net/projects/markdown/syntax"&gt;Markdown&lt;/a&gt;. In addition
to the standard Markdown syntax, you can use all of the features in Python’s
&lt;a href="https://pythonhosted.org/Markdown/extensions/extra.html"&gt;Markdown Extra&lt;/a&gt;. Other
Markdown extensions automatically loaded are
&lt;a href="https://pythonhosted.org/Markdown/extensions/code_hilite.html"&gt;CodeHilite&lt;/a&gt;
which will provide syntax highlighting for any code fragments you place in your
documentation, &lt;a href="https://pythonhosted.org/Markdown/extensions/smarty.html"&gt;SmartyPants&lt;/a&gt; which gives the typographically correct version of various characters,
and &lt;a href="https://pythonhosted.org/Markdown/extensions/meta_data.html"&gt;Meta-Data&lt;/a&gt;.
The latter is used internally as a way for the user to provide extra information
to and/or customize the behaviour of &lt;span class="caps"&gt;FORD&lt;/span&gt;. Information on providing meta-data
and what types of data &lt;span class="caps"&gt;FORD&lt;/span&gt; will look for can be found in the next section.&lt;/p&gt;
&lt;p&gt;In modern (post 1990) Fortran, comments are indicated by an exclamation mark
(!). &lt;span class="caps"&gt;FORD&lt;/span&gt; will ignore a normal comment like this. However, comments with two
exclamation marks (!!) are interpreted as documentation and will be captured
for inclusion in the output. &lt;span class="caps"&gt;FORD&lt;/span&gt; documentation must come &lt;em&gt;after&lt;/em&gt; whatever it
is that you are documenting, either at the end of the line or on a subsequent
line. This was chosen because it was felt it is easier to make your
documentation readable from within the source-code this way. This&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;subroutine &lt;/span&gt;&lt;span class="n"&gt;feed_pets&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cats&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dogs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;food&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;angry&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c"&gt;!! Feeds your cats and dogs, if enough food is available. If not enough&lt;/span&gt;
    &lt;span class="c"&gt;!! food is available, some of your pets will get angry.&lt;/span&gt;

    &lt;span class="c"&gt;! Arguments&lt;/span&gt;
    &lt;span class="kt"&gt;integer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;intent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;in&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="kd"&gt;::&lt;/span&gt; &lt;span class="n"&gt;cats&lt;/span&gt;
        &lt;span class="c"&gt;!! The number of cats to keep track of.&lt;/span&gt;
    &lt;span class="kt"&gt;integer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;intent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;in&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="kd"&gt;::&lt;/span&gt; &lt;span class="n"&gt;dogs&lt;/span&gt;
        &lt;span class="c"&gt;!! The number of dogs to keep track of.&lt;/span&gt;
    &lt;span class="kt"&gt;real&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;intent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inout&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="kd"&gt;::&lt;/span&gt; &lt;span class="n"&gt;food&lt;/span&gt;
        &lt;span class="c"&gt;!! The ammount of pet food (in kilograms) which you have on hand.&lt;/span&gt;
    &lt;span class="kt"&gt;integer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;intent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kd"&gt;::&lt;/span&gt; &lt;span class="n"&gt;angry&lt;/span&gt;
        &lt;span class="c"&gt;!! The number of pets angry because they weren't fed.&lt;/span&gt;

    &lt;span class="c"&gt;!...&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;
&lt;span class="k"&gt;end subroutine &lt;/span&gt;&lt;span class="n"&gt;feed_pets&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;looks better/more readable than&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;!! Feeds your cats and dogs, if enough food is available. If not enough&lt;/span&gt;
&lt;span class="c"&gt;!! food is available, some of your pets will get angry.&lt;/span&gt;
&lt;span class="k"&gt;subroutine &lt;/span&gt;&lt;span class="n"&gt;feed_pets&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cats&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dogs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;food&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;angry&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c"&gt;! Arguments&lt;/span&gt;
    &lt;span class="c"&gt;!! The number of cats to keep track of.&lt;/span&gt;
    &lt;span class="kt"&gt;integer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;intent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;in&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="kd"&gt;::&lt;/span&gt; &lt;span class="n"&gt;cats&lt;/span&gt;
    &lt;span class="c"&gt;!! The number of dogs to keep track of.&lt;/span&gt;
    &lt;span class="kt"&gt;integer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;intent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;in&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="kd"&gt;::&lt;/span&gt; &lt;span class="n"&gt;dogs&lt;/span&gt;
    &lt;span class="c"&gt;!! The ammount of pet food (in kilograms) which you have on hand.&lt;/span&gt;
    &lt;span class="kt"&gt;real&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;intent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inout&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="kd"&gt;::&lt;/span&gt; &lt;span class="n"&gt;food&lt;/span&gt;
    &lt;span class="c"&gt;!! The number of pets angry because they weren't fed.&lt;/span&gt;
    &lt;span class="kt"&gt;integer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;intent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kd"&gt;::&lt;/span&gt; &lt;span class="n"&gt;angry&lt;/span&gt;

    &lt;span class="c"&gt;!...&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;
&lt;span class="k"&gt;end subroutine &lt;/span&gt;&lt;span class="n"&gt;feed_pets&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;in the opinion of this author, especially with regards to the list of arguments.
Unfortunately, if you disagree, it is unlikely that there will ever be a switch
available to change this behaviour, as it would require a drastic rewrite of
large parts of the structure of the code.&lt;/p&gt;
&lt;p&gt;Please note that legacy Fortran (fixed-form code) is not supported at this
time. If anyone would like to contribute the necessary modifications to
./ford/reader.py to convert fixed-form syntax into free-form, it should not be
difficult (see the approach taken by
&lt;a href="http://erikdemaine.org/software/f90doc/"&gt;f90doc&lt;/a&gt;). However, it is not a
priority for me at this time (since I regard fixed-form Fortran as an
abomination which should be wiped from the face of this Earth).&lt;/p&gt;
&lt;h4&gt;Output&lt;/h4&gt;
&lt;p&gt;Output is in &lt;span class="caps"&gt;HTML&lt;/span&gt;. By default, all links will be relative, meaning that the
output can be placed and viewed anywhere. The
&lt;a href="http://getbootstrap.com/"&gt;Bootstrap&lt;/a&gt; framework was used to make it easy to
quickly design professional looking pages. An example of some output from
my project &lt;a href="https://github.com/cmacmackin/futility"&gt;Futility&lt;/a&gt; is shown below.&lt;/p&gt;
&lt;figure&gt;&lt;img alt="Some example output." src="https://politicalphysicist.github.io/images/ford.png"/&gt;&lt;figcaption&gt;Some example output.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3&gt;Options&lt;/h3&gt;
&lt;p&gt;While not nearly as configurable as the likes of
&lt;a href="http://www.stack.nl/~dimitri/doxygen/"&gt;Doxygen&lt;/a&gt;, &lt;span class="caps"&gt;FORD&lt;/span&gt;’s output can still be
customized to some extent by users.&lt;/p&gt;
&lt;h4&gt;Command-Line Options&lt;/h4&gt;
&lt;p&gt;The command-line interface is given below:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ford.py [-h] [-d PROJECT_DIRECTORY] [-o OUTPUT_DIR] [-s CSS]
             [--exclude EXCLUDE] [-e [EXTENSIONS [EXTENSIONS ...]]]
             project_file
&lt;/pre&gt;&lt;/div&gt;
&lt;dl&gt;
&lt;dt&gt;PROJECT_DIRECTORY&lt;/dt&gt;
&lt;dd&gt;The directory where the source-files are to be found for
  this project. This must not be a subdirectory of the OUTPUT_DIR (see below).&lt;/dd&gt;
&lt;dt&gt;OUTPUT_DIR&lt;/dt&gt;
&lt;dd&gt;The directory where the project output will be placed.
  &lt;strong&gt;Any content already present there will be deleted.&lt;/strong&gt;&lt;/dd&gt;
&lt;dt&gt;&lt;span class="caps"&gt;CSS&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;The path to a custom style-sheet which can be used to modify the
  appearance of the output.&lt;dd&gt;
&lt;dt&gt;&lt;span class="caps"&gt;EXCLUDE&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;A source file which should not be read. If you want to specify more than
  one then you will need to do it in the project file.&lt;dd&gt;
&lt;dt&gt;&lt;span class="caps"&gt;EXTENSIONS&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;File extensions which will be read by &lt;span class="caps"&gt;FORD&lt;/span&gt; for documentation.
  (&lt;em&gt;default:&lt;/em&gt; f90, f95, f03, f08)&lt;/dd&gt;
&lt;dt&gt;project_file&lt;/dt&gt;
&lt;dd&gt;The file containing a description of your project and various settings
  for &lt;span class="caps"&gt;FORD&lt;/span&gt;.&lt;/dd&gt;
&lt;/dd&gt;&lt;/dd&gt;&lt;/dd&gt;&lt;/dd&gt;&lt;/dl&gt;
&lt;p&gt;Settings specified at the command-line will override those specified in the
project file.&lt;/p&gt;
&lt;h4&gt;Project File Options&lt;/h4&gt;
&lt;p&gt;You can specify various options and information for your project in the
meta-data of your project file. Quoting from the
&lt;a href="https://pythonhosted.org/Markdown/extensions/meta_data.html"&gt;Markdown Meta-Data&lt;/a&gt; page:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Meta-data consists of a series of keywords and values defined at the beginning of a markdown document like this:&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;Title:   My Document&lt;br&gt;Summary: A brief description of my document.&lt;br&gt;Authors: Waylan Limberg&lt;br&gt;         John Doe&lt;br&gt;Date:    October 2, 2007&lt;br&gt;blank-value: &lt;br&gt;base_url: http://example.com&lt;/br&gt;&lt;/br&gt;&lt;/br&gt;&lt;/br&gt;&lt;/br&gt;&lt;/br&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;This is the first paragraph of the document.
The keywords are case-insensitive and may consist of letters, numbers, underscores and dashes and must end with a colon. The values consist of anything following the colon on the line and may even be blank.&lt;/p&gt;
&lt;p&gt;If a line is indented by 4 or more spaces, that line is assumed to be an additional line of the value for the previous keyword. A keyword may have as many lines as desired.&lt;/p&gt;
&lt;p&gt;The first blank line ends all meta-data for the document. Therefore, the first line of a document must not be blank. All meta-data is stripped from the document prior to any further processing by Markdown.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The options which can be specified in the meta-data are listed below. Defaults
are included in the description, if they exist.
&lt;dl&gt;
&lt;dt&gt;project&lt;/dt&gt;&lt;dd&gt;The name of this project.
  (&lt;em&gt;default:&lt;/em&gt; Fortran Project)&lt;/dd&gt;
&lt;dt&gt;summary&lt;/dt&gt;&lt;dd&gt;A summary of the description of your project. If present
  it will be printed in a “Jumbotron” element at the top of the documentation
  index page. This will be processed by Markdown before being used.&lt;/dd&gt;
&lt;dt&gt;project_url&lt;/dt&gt;&lt;dd&gt;The &lt;span class="caps"&gt;URL&lt;/span&gt; at which the documentation will be available. If
left blank then relative URLs will be used for links. (&lt;em&gt;default:&lt;/em&gt; blank,
  i.e. relative links)&lt;/dd&gt;
&lt;dt&gt;project_directory&lt;/dt&gt;&lt;dd&gt;The directory where the source-files are to be
  found for this project. This must not be a subdirectory of the output_dir (see
  below). (&lt;em&gt;default:&lt;/em&gt; ./src)&lt;/dd&gt;
&lt;dt&gt;output_dir&lt;/dt&gt;&lt;dd&gt;The directory where the project output will be placed.
  &lt;strong&gt;Any content already present there will be deleted.&lt;/strong&gt;&lt;/dd&gt;
&lt;dt&gt;css&lt;/dt&gt;&lt;dd&gt;The path to a custom style-sheet which can be used to modify the
  appearance of the output. (&lt;em&gt;default:&lt;/em&gt; ./doc)&lt;/dd&gt;
&lt;dt&gt;extensions&lt;/dt&gt;&lt;dd&gt;File extensions which will be read by &lt;span class="caps"&gt;FORD&lt;/span&gt; for
  documentation. Each extension must be on its own line.
  (&lt;em&gt;default:&lt;/em&gt; f90, f95, f03, f08)&lt;/dd&gt;
&lt;dt&gt;exclude&lt;/dt&gt;&lt;dd&gt;A source file which should not be read. Each excluded file
  must be on its own line. Provide only the file name, not the full path.&lt;/dd&gt;
&lt;dt&gt;display&lt;/dt&gt;&lt;dd&gt;How much documentation should be printed. Options are
  ‘public’, ‘private’, ‘protected’, or any combination of those three. Each
  choice must be on its own line. (&lt;em&gt;default:&lt;/em&gt; ‘public’ and ‘protected’)
  &lt;/dd&gt;
&lt;dt&gt;version&lt;/dt&gt;&lt;dd&gt;The version name/number of your project.&lt;/dd&gt;
&lt;dt&gt;year&lt;/dt&gt;&lt;dd&gt;The year to display in the copyright notice. (&lt;em&gt;default:&lt;/em&gt;
  the current year)&lt;/dd&gt;
&lt;dt&gt;project_github&lt;/dt&gt;&lt;dd&gt;The &lt;span class="caps"&gt;URL&lt;/span&gt; of the Github repository for this project.
  &lt;/dd&gt;
&lt;dt&gt;project_bitbucket&lt;/dt&gt;&lt;dd&gt;The &lt;span class="caps"&gt;URL&lt;/span&gt; of the BitBucket repository for this project.&lt;/dd&gt;
&lt;dt&gt;project_sourceforge&lt;/dt&gt;&lt;dd&gt;The Sourceforge repository for this project.
  &lt;/dd&gt;
&lt;dt&gt;project_download&lt;/dt&gt;&lt;dd&gt;A &lt;span class="caps"&gt;URL&lt;/span&gt; from which to download the source or
  binaries for this project.&lt;/dd&gt;
&lt;dt&gt;project_website&lt;/dt&gt;&lt;dd&gt;The homepage for this project.&lt;/dd&gt;
&lt;dt&gt;author&lt;/dt&gt;&lt;dd&gt;The name of the person(s) or organization who wrote this project.&lt;/dd&gt;
&lt;dt&gt;author_description&lt;/dt&gt;&lt;dd&gt;A brief description of the author. You could
  provide biographical details or links to other work, for example. This will
  be processed by Markdown before being used.&lt;/dd&gt;
&lt;dt&gt;author_pic&lt;/dt&gt;&lt;dd&gt;A picture of or avatar for the author.&lt;/dd&gt;
&lt;dt&gt;github&lt;/dt&gt;&lt;dd&gt;The author’s Github page.&lt;/dd&gt;
&lt;dt&gt;bitbucket&lt;/dt&gt;&lt;dd&gt;The author’s BitBucket page.&lt;/dd&gt;
&lt;dt&gt;facebook&lt;/dt&gt;&lt;dd&gt;The author’s Facebook profile.&lt;/dd&gt;
&lt;dt&gt;twitter&lt;/dt&gt;&lt;dd&gt;The author’s Twitter.&lt;/dd&gt;
&lt;dt&gt;google_plus&lt;/dt&gt;&lt;dd&gt;The author’s Google+&lt;/dd&gt;
&lt;dt&gt;linkedin&lt;/dt&gt;&lt;dd&gt;The author’s LinkedIn profile.&lt;/dd&gt;
&lt;dt&gt;email&lt;/dt&gt;&lt;dd&gt;The author’s email address.&lt;/dd&gt;
&lt;dt&gt;website&lt;/dt&gt;&lt;dd&gt;The author’s website.&lt;/dd&gt;
&lt;/dl&gt;&lt;/p&gt;
&lt;h4&gt;Meta-Data in Documentation&lt;/h4&gt;
&lt;p&gt;When documenting your source files you can provide meta-data at the top of an
item’s documentation. There can not be any other documentation before it; not
even a blank line of documentation. This will work&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;! Good&lt;/span&gt;
&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="kd"&gt;::&lt;/span&gt; &lt;span class="n"&gt;cat&lt;/span&gt;
  &lt;span class="c"&gt;!! author: A Fortran Programmer&lt;/span&gt;
  &lt;span class="c"&gt;!! version: v0.2&lt;/span&gt;
  &lt;span class="c"&gt;!!&lt;/span&gt;
  &lt;span class="c"&gt;!! This data-type represents a cat.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;but this won’t&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;! Bad&lt;/span&gt;
&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="kd"&gt;::&lt;/span&gt; &lt;span class="n"&gt;cat&lt;/span&gt;
  &lt;span class="c"&gt;!!&lt;/span&gt;
  &lt;span class="c"&gt;!! author: A Fortran programmer&lt;/span&gt;
  &lt;span class="c"&gt;!! version: v0.2&lt;/span&gt;
  &lt;span class="c"&gt;!!&lt;/span&gt;
  &lt;span class="c"&gt;!! This data-type represents a cat.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The meta-data will be displayed for procedures, derived types,
files, programs, modules, type-bound procedures, and interfaces. It may be
displayed in more cases in future. Recognized types of meta-data are:&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;author&lt;/dt&gt;&lt;dd&gt;The author of this part of the code&lt;/dd&gt;
&lt;dt&gt;date&lt;/dt&gt;&lt;dd&gt;The date that this part of the code was written (or that the
  documentation was written; whichever makes more sense to you).&lt;/dd&gt;
&lt;dt&gt;license&lt;/dt&gt;&lt;dd&gt;The license for this part of your code. If you want
  to provide a link then it will have to be in &lt;span class="caps"&gt;HTML&lt;/span&gt;, as it won’t be processed
  by Markdown.&lt;/dd&gt;
&lt;dt&gt;version&lt;/dt&gt;&lt;dd&gt;The version number (or name) of this part of the code.&lt;/dd&gt;
&lt;dt&gt;category&lt;/dt&gt;&lt;dd&gt;A category for this part of the code. Currently this is
  fairly useless, just being printed in the documentation. In future, &lt;span class="caps"&gt;FORD&lt;/span&gt; may
  provide lists of things in each category.&lt;/dd&gt;
&lt;dt&gt;summary&lt;/dt&gt;&lt;dd&gt;A brief description of this part of the code. If not
  specified then &lt;span class="caps"&gt;FORD&lt;/span&gt; will use the first paragraph of the body of your documentation.&lt;/dd&gt;
&lt;dt&gt;deprecated&lt;/dt&gt;&lt;dd&gt;If this is present and not “False“ then a
  label saying “Deprecated” will be placed in the documentation.&lt;/dd&gt;
&lt;/dl&gt;
&lt;h3&gt;ToDo&lt;/h3&gt;
&lt;p&gt;This software is still extremely young and much remains to be done. Various
things which I’d like to do at some point include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Support some of the old Fortran 77 ways of doing things, as these are often
  still used. This includes &lt;span class="caps"&gt;PARAMETER&lt;/span&gt; statements and &lt;span class="caps"&gt;EXTERNAL&lt;/span&gt; statements.
  Support for fixed-form code is less of a priority.&lt;/li&gt;
&lt;li&gt;Add the ability to produce dependency diagrams and inheritance diagrams for
  modules and types, respectively.&lt;/li&gt;
&lt;li&gt;Make more options configurable from the command-line.&lt;/li&gt;
&lt;li&gt;Integrate the Pelican MathJax plugin.&lt;/li&gt;
&lt;li&gt;Add MathJax support. &lt;strong&gt;Priority Task&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Add a search feature.&lt;/li&gt;
&lt;li&gt;Test on some more code, including that of other people, who may have different
  coding styles.&lt;/li&gt;
&lt;li&gt;Add the ability to identify function calls and use this to work out
  call-trees (subroutine calls are already captured, although not yet used
  in any of the output).&lt;/li&gt;
&lt;li&gt;Add the option for users to specify a Creative Commons license for their
  documentation, which will be inserted into the page footer.&lt;/li&gt;
&lt;li&gt;Make it possible to override the display options within a particular
  part of the code and/or for an individual item within the code.&lt;/li&gt;
&lt;li&gt;Provide an option to force all (non-string) text which is captured to be
  lower case.&lt;/li&gt;
&lt;li&gt;Add the ability to recognize the use of intrinsic modules&lt;/li&gt;
&lt;li&gt;Add the ability to allow for &lt;code&gt;only&lt;/code&gt; statements when loading modules and for
  renaming module procedures when loading them.&lt;/li&gt;
&lt;li&gt;Improve the sidebar for source files so that it will link to the items that it lists.&lt;/li&gt;
&lt;li&gt;Allow the user to provide a favicon.&lt;/li&gt;
&lt;li&gt;Provide a directory in which the user can place any images and/or other
  media they want available.&lt;/li&gt;
&lt;li&gt;Use summaries of the description in some places.&lt;/li&gt;
&lt;li&gt;Improve the way procedures are handled as arguments. In particular, allow
  any abstract interface which was used as a template to be visible somehow.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Things which ideally I would do, but are not currently on the radar include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Add the ability for people to customize appearance of the output more (this
  would require drastic changes to the template system).&lt;/li&gt;
&lt;li&gt;Support fixed-form Fortran (doable, but low priority).&lt;/li&gt;
&lt;li&gt;Add the ability to identify type-bound procedure calls and use these to
  construct call-trees. This would be extremely difficult, as it would
  require keeping track of names and types of variables throughout the code.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Approach&lt;/h3&gt;
&lt;p&gt;The basic algorithm for generating the documentation is as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Get instructions from user. These are to be passes as command-line arguments
  and meta-data within the project file.&lt;/li&gt;
&lt;li&gt;Parse each file which is to be documented.&lt;/li&gt;
&lt;li&gt;Create a file object. This will contain any documentation meant for the
     file as a whole and a list of any file contents.&lt;/li&gt;
&lt;li&gt;Create module, subroutine, function, and/or program objects for each of
     these structures within the file. Each of these objects will also store
     comments, contents, and parameters.&lt;/li&gt;
&lt;li&gt;Continue to recurse into these structures, adding interface, type,
     variable, subroutine and function objects as necessary.&lt;/li&gt;
&lt;li&gt;Perform further analysis on the parsed code, correlating anything defined
  in one place but used in another. This will be used to generate hyperlinks
  when producing the documentation.&lt;/li&gt;
&lt;li&gt;Convert comments into &lt;span class="caps"&gt;HTML&lt;/span&gt;. Assume that they have been written in Markdown.
  Also make sure to process LaTeX (not yet implemented).&lt;/li&gt;
&lt;li&gt;Produce the documentation. This will be done using Jinja2 templates.&lt;/li&gt;
&lt;/ul&gt;</summary><category term="Python"></category><category term="Fortran"></category><category term="Programming"></category><category term="Software"></category></entry><entry><title>A (Not as Brief as I’d Hoped) Fortran Tutorial</title><link href="https://politicalphysicist.github.io/a-not-as-brief-as-id-hoped-fortran-tutorial.html" rel="alternate"></link><published>2014-10-31T23:00:00+00:00</published><updated>2014-10-31T23:00:00+00:00</updated><author><name>C. MacMackin</name></author><id>tag:politicalphysicist.github.io,2014-10-31:a-not-as-brief-as-id-hoped-fortran-tutorial.html</id><summary type="html">&lt;p&gt;&lt;em&gt;&lt;strong&gt;Note:&lt;/strong&gt; I wrote this guide for the Saint Mary’s University Astronomy and
Physics Society to go along with a tutorial that I will present on the Fortran
programming language. I thought I’d post it here in addition to the
&lt;a href="http://ap.smu.ca/~smuaps/an-introduction-to-modern-fortran-programming.html"&gt;&lt;span class="caps"&gt;SMUAPS&lt;/span&gt; website&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Fortran, which stands for FORmula TRANslator, is the oldest high level
programming language and remains, albeit with significant improvements,
one of the main languages used by physicists.&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;
Most computational physics is done using Fortran and this is the language
typically used in &lt;span class="caps"&gt;SMU&lt;/span&gt;’s Computational Methods for Physicists class. This
introduction will show you how to use various useful features of the language
in its modern form.&lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="#fn:2" rel="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt; It will do this by defining a problem which we wish a
program to solve and then showing how to write such a program. The program
can be &lt;a href="https://politicalphysicist.github.io/attachments/fortran/potential_field.f90"&gt;downloaded here&lt;/a&gt;
if you want to follow along (which I’d recommend
doing). I assume that you already know how the basics of computer programming
but have not previously done scientific computing or worked with Fotran. Of
course, this will only be a taste of Fortran’s abilities and there will be
many features, both simple and complex, which I will not be able to mention.
For a good overview of them, see
&lt;a href="http://en.wikipedia.org/wiki/Fortran_95_language_features"&gt;this Wikipedia article&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Table of Contents&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#problem"&gt;The Problem&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#method"&gt;The Numerical Method&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#stats"&gt;Statistics&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#algorithm"&gt;The Algorithm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#style"&gt;A Note on Style&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#space"&gt;Comments and White Space&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#basics"&gt;Fortran Basics&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#structure"&gt;Basic Program Structure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#variables"&gt;Variables&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#conditional"&gt;Conditional Statements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#loops"&gt;Loops&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#instructions"&gt;Getting Instructions from the User&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#reading"&gt;Reading and Writing Data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#procedures"&gt;Procedures&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#pass"&gt;Pass by Reference&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#functions"&gt;Functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#subroutines"&gt;Subroutines&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#array"&gt;Array Syntax&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#compiling"&gt;Compiling and Running Your Program&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#packaging"&gt;Packaging Your Procedures&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#summing"&gt;Summing Up&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#resources"&gt;Useful Resources&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a name="problem"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;The Problem&lt;/h3&gt;
&lt;p&gt;Say we’ve measure the electric potentials at various points in one dimension.
We have recorded the location at which the measurement was taken and the value
of the potential in a file on our computer. We now want to calculate the
electric field that exists at each point where we took a measurement. These
results will be printed to a second text file on the computer. The program
should also find the average electric field and the standard deviation.&lt;/p&gt;
&lt;p&gt;&lt;a name="method"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;The Numerical Method&lt;/h4&gt;
&lt;p&gt;To do this, we need to recall that
&lt;/p&gt;
&lt;div class="math"&gt;$$ \mathbf{E} = -\nabla V. $$&lt;/div&gt;
&lt;p&gt;
In our simple, one dimensional case, this becomes
&lt;/p&gt;
&lt;div class="math"&gt;$$ E = -\frac{dV}{dx}. $$&lt;/div&gt;
&lt;p&gt;
However, we don’t actually know the function &lt;span class="math"&gt;\(V(x)\)&lt;/span&gt;, only the value of &lt;span class="math"&gt;\(V\)&lt;/span&gt; at
particular values of &lt;span class="math"&gt;\(x\)&lt;/span&gt;. So, how do we calculate the derivative? In reality,
we’ll have to estimate it. The limit definition of the derivative says
&lt;/p&gt;
&lt;div class="math"&gt;$$ \frac{dV}{dx} = \lim_{h \to 0} \frac{V(x + h) - V(x)}{h}, $$&lt;/div&gt;
&lt;p&gt;
so you might be tempted to use
&lt;/p&gt;
&lt;div class="math"&gt;$$ \frac{dV_{i}}{dx} \approx \frac{V_{i+1} - V_{i}}{x_{i+1} - x_{i}}. $$&lt;/div&gt;
&lt;p&gt;
However, that is only accounting for the rate of change on one side of your
data-point, &lt;span class="math"&gt;\(i\)&lt;/span&gt;. Thus, it would be better to use
&lt;/p&gt;
&lt;div class="math"&gt;$$ \frac{dV_{i}}{dx} \approx \frac{V_{i+1} - V_{i-1}}{x_{i+1} - x_{i-1}}. $$&lt;/div&gt;
&lt;p&gt;
Of course, this won’t work at two ends of the data set, so in those cases we’ll
simply have to make do with half of the information and use something along
the lines of our first guess of how to take the derivative.&lt;/p&gt;
&lt;p&gt;&lt;a name="stats"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;Statistics&lt;/h4&gt;
&lt;p&gt;As I hope everyone will know, the average value of some data is given by
&lt;/p&gt;
&lt;div class="math"&gt;$$ \overline{x} = \frac{1}{N}\sum_{i=1}^{N} x_i~. $$&lt;/div&gt;
&lt;p&gt;
As a reminder, the standard deviation of a data-set is
&lt;/p&gt;
&lt;div class="math"&gt;$$ \sigma = \sqrt{\frac{1}{N-1} \sum_{i=1}^N (x_i - \overline{x})^2}.$$&lt;/div&gt;
&lt;p&gt;&lt;a name="algorithm"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;The Algorithm&lt;/h3&gt;
&lt;p&gt;The basic structure of our program will be as follows&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Determine the files from which to read and to which to write data.&lt;/li&gt;
&lt;li&gt;Read the data from the input file.&lt;/li&gt;
&lt;li&gt;Take the derivative of the data and multiply by negative one.&lt;/li&gt;
&lt;li&gt;Write the processed data to the output file.&lt;/li&gt;
&lt;li&gt;Calculate the mean and standard deviation of the processed data.&lt;/li&gt;
&lt;li&gt;Print these statistical values to the screen.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The calculations in steps 3 and 5 are to be done using the techniques and
equations discussed in the previous section.&lt;/p&gt;
&lt;h3&gt;A Note on Style&lt;/h3&gt;
&lt;p&gt;&lt;a name="style"&gt;&lt;/a&gt;
Fortran, as a language, is case-insensitive. This means that  “&lt;span class="caps"&gt;HELLO&lt;/span&gt;”,
“hello”, and “hElLo” are equivalent. The original standard style for programming
in Fortran was to use all upper-case letters. Personally, I find this hard to
read. Many people, today, will use entirely lower-case letters, and some will
use a mixture of both. I have read that the standard now is to use
upper-case letters for anything that is intrinsic to the language, and
lower-case letters for everything else. Although it is debatable how many
people actually stick to this, I will be using this style throughout this
tutorial. Note that case-insensitivity does not apply to the contents
of strings.&lt;/p&gt;
&lt;p&gt;&lt;a name="comments"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Comments and White-Space&lt;/h3&gt;
&lt;p&gt;From Fortran 90 onward, comments are designated by an exclamation mark.
Anything on a line following an exclamation mark (assuming that the
exclamation mark isn’t inside a string) will be ignored by the
compiler. Comments should be used to document your code. I’d recommend
having a standard template that you use at the top of each program
explaining what it does. An example of the format I use is provided below.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;!==============================================================================!&lt;/span&gt;
&lt;span class="c"&gt;!                         B E G I N    P R O G R A M :                         !&lt;/span&gt;
&lt;span class="c"&gt;!                        P O T E N T I A L _ F I E L D                         !&lt;/span&gt;
&lt;span class="c"&gt;!==============================================================================!&lt;/span&gt;
&lt;span class="c"&gt;!                                                                              !&lt;/span&gt;
&lt;span class="c"&gt;!   AUTHOR:         A Fortran Programmer                                       !&lt;/span&gt;
&lt;span class="c"&gt;!   WRITTEN:        October, 2014                                              !&lt;/span&gt;
&lt;span class="c"&gt;!   MODIFICATIONS:  None                                                       !&lt;/span&gt;
&lt;span class="c"&gt;!                                                                              !&lt;/span&gt;
&lt;span class="c"&gt;!   PURPOSE:        Processes data on potential to calculate a field. Then     !&lt;/span&gt;
&lt;span class="c"&gt;!                   finds some statistics on the field. The input file should  !&lt;/span&gt;
&lt;span class="c"&gt;!                   consist of two columns of data, separated by spaces. The   !&lt;/span&gt;
&lt;span class="c"&gt;!                   first column should be a position and the second should be !&lt;/span&gt;
&lt;span class="c"&gt;!                   the potential at that position. All values should be in SI !&lt;/span&gt;
&lt;span class="c"&gt;!                   units. The default input file is 'in.dat' and the default  !&lt;/span&gt;
&lt;span class="c"&gt;!                   output file is 'out.dat'. Optionally, these may be         !&lt;/span&gt;
&lt;span class="c"&gt;!                   overridden by providing these two file names as arguments  !&lt;/span&gt;
&lt;span class="c"&gt;!                   when executing the program.                                !&lt;/span&gt;
&lt;span class="c"&gt;!                                                                              !&lt;/span&gt;
&lt;span class="c"&gt;!                   I.e.  $ ./potential_field [input_file [output_file]]       !&lt;/span&gt;
&lt;span class="c"&gt;!                                                                              !&lt;/span&gt;
&lt;span class="c"&gt;!   EXTERNALS:      None                                                       !&lt;/span&gt;
&lt;span class="c"&gt;!                                                                              !&lt;/span&gt;
&lt;span class="c"&gt;!------------------------------------------------------------------------------!&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The Fortran 90
standard saw the adoption of free-form programming. This means that you
can insert any number of blank lines that you like between successive lines
of code and that there can be as many spaces as you like within a line of code.
Note, however, that most compilers will place a limit on the number of
characters that you may have in a line; often this is 132 characters. In
any case, it is bad style, in my opinion, to have lines longer than about
80 characters.&lt;/p&gt;
&lt;p&gt;&lt;a name="basics"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Fortran Basics&lt;/h3&gt;
&lt;p&gt;Before we fully begin, there are a few more things I want to discuss. These are
some of the fundamental concepts seen in every programming language. I’m going
to assume that you are familiar with these principles and will just show
how they are applied in Fortran.&lt;/p&gt;
&lt;p&gt;&lt;a name="structure"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;Basic Program Structure&lt;/h4&gt;
&lt;p&gt;The great advantage of Fortran is the fairly obvious meaning of all of its
syntax—something which can emphatically &lt;em&gt;not&lt;/em&gt; be said for C. The
basic structure of our program will be:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;PROGRAM &lt;/span&gt;&lt;span class="n"&gt;potential_field&lt;/span&gt;
    &lt;span class="k"&gt;IMPLICIT NONE&lt;/span&gt;

    &lt;span class="c"&gt;! Variable declarations&lt;/span&gt;
    &lt;span class="c"&gt;! ...&lt;/span&gt;
&lt;span class="c"&gt;!---------------------------------------!&lt;/span&gt;

    &lt;span class="c"&gt;! Main program&lt;/span&gt;
    &lt;span class="c"&gt;! ...&lt;/span&gt;

    &lt;span class="k"&gt;STOP&lt;/span&gt;
&lt;span class="k"&gt;END PROGRAM &lt;/span&gt;&lt;span class="n"&gt;potential_field&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The first line says that you are writing a stand-alone program (as opposed to,
say, a subroutine) called “potential_field”. &lt;code&gt;IMPLICIT NONE&lt;/code&gt; instructs the
compiler to give an error message if it
encounters any variables which haven’t been declared. This should always be put
at the start of programs in order to prevent bugs occurring due to typos in
variable names. After this we would declare our variables and then would come
the program itself. &lt;code&gt;STOP&lt;/code&gt; stops the
execution of the program and the final line designates the end of the program
within your text file. You are then free to write any procedures you want
below that. Unlike many other programming languages, Fortran does not allow
anything in your source file to fall outside of a program unit—that is, outside
of a program, subroutine, function, or module (more on the latter three later).&lt;/p&gt;
&lt;p&gt;&lt;a name="variables"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;Variables&lt;/h4&gt;
&lt;p&gt;Fortran has five fundamental data-types:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;INTEGER&lt;/code&gt;s are integer values, which can be represented exactly by the computer.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;REAL&lt;/code&gt;s are floating point numbers, representing real numbers. They are not
  exact representations of real numbers, having only a finite number of decimal places.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;COMPLEX&lt;/code&gt; variables are effectively just two real variables, one storing
  the real component of a number, the other storing the imaginary component.
  These don’t need to be used very often.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CHARACTER&lt;/code&gt;s are text characters, usually encoded as &lt;span class="caps"&gt;ASCII&lt;/span&gt;. Character
  variables can be given a length, allowing them to be used as strings.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;LOGICAL&lt;/code&gt;s are boolean variables, which can store a value of either
  &lt;code&gt;.TRUE.&lt;/code&gt; or &lt;code&gt;.FALSE.&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can also define “derived types,” which are the equivalents to structs in
C or objects/classes in other languages. These are only really needed in
larger programs, where they can provide a useful way of organizing
data and code.&lt;/p&gt;
&lt;p&gt;A sample of the variable declarions in our code are given below.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;CHARACTER&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;LEN&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;               &lt;span class="kd"&gt;::&lt;/span&gt;  &lt;span class="n"&gt;infile&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'in.dat'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;                    &lt;span class="p"&gt;&amp;amp;&lt;/span&gt;
                                    &lt;span class="n"&gt;outfile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'out.dat'&lt;/span&gt;
&lt;span class="kt"&gt;INTEGER&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;PARAMETER&lt;/span&gt;              &lt;span class="kd"&gt;::&lt;/span&gt;  &lt;span class="n"&gt;data_max&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1012&lt;/span&gt;
&lt;span class="kt"&gt;INTEGER&lt;/span&gt;                         &lt;span class="kd"&gt;::&lt;/span&gt;  &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;                                     &lt;span class="p"&gt;&amp;amp;&lt;/span&gt;
                                    &lt;span class="n"&gt;ioval&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;                                 &lt;span class="p"&gt;&amp;amp;&lt;/span&gt;
                                    &lt;span class="n"&gt;num_args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;                              &lt;span class="p"&gt;&amp;amp;&lt;/span&gt;
                                    &lt;span class="n"&gt;data_size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data_max&lt;/span&gt;
&lt;span class="kt"&gt;REAL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                         &lt;span class="kd"&gt;::&lt;/span&gt;  &lt;span class="n"&gt;mean&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;                                  &lt;span class="p"&gt;&amp;amp;&lt;/span&gt;
                                    &lt;span class="n"&gt;stdev&lt;/span&gt;
&lt;span class="kt"&gt;REAL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;DIMENSION&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data_max&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="kd"&gt;::&lt;/span&gt;  &lt;span class="n"&gt;field&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;                                 &lt;span class="p"&gt;&amp;amp;&lt;/span&gt;
                                    &lt;span class="n"&gt;postn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;                                 &lt;span class="p"&gt;&amp;amp;&lt;/span&gt;
                                    &lt;span class="n"&gt;potntl&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The ampersands indicate line continuation.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;CHARACTER(LEN=32)&lt;/code&gt; means that these variables are strings containing 32
characters. The &lt;code&gt;PARAMETER&lt;/code&gt; attribute means that the variable is a constant,
whose value is set at declaration. &lt;code&gt;REAL(8)&lt;/code&gt; means that this is an 8-byte real
variable (the equivalent of a &lt;code&gt;double&lt;/code&gt; in C), which provides about twice the
precision of a standard &lt;code&gt;REAL&lt;/code&gt; variable. The &lt;code&gt;DIMENSION()&lt;/code&gt; attribute
indicates that this variable will be an array. The number inside the parentheses
is the length of the array. It must either be a literal or a parameter.
You can also have multidimensional arrays, which are declared with a
&lt;code&gt;DIMENSION(dim1,dim2,dim3,...)&lt;/code&gt; attribute. By default, Fortran arrays are
indexed starting at 1, unlike most other languages. On a technical note,
they are stored in column major order rather than the more typical
&lt;a href="http://en.wikipedia.org/wiki/Row-major_order"&gt;row major order&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a name="conditional"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;Conditional Statements&lt;/h4&gt;
&lt;p&gt;If you want a single line to be executed only if &lt;code&gt;&amp;lt;condition&amp;gt;&lt;/code&gt; is true, you
would use the following syntax:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;IF&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;condition&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;statements&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The general form for an if-statement is&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;IF&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;condition&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;THEN&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;statemtents&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;ELSE IF&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;condition2&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;THEN&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;statemtents&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;ELSE IF&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;condition3&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;THEN&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;statemtents&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;ELSE&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;statemtents&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;END IF&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There can be an arbitrary number of &lt;code&gt;ELSE IF&lt;/code&gt;s, including zero. The &lt;code&gt;ELSE&lt;/code&gt;
statement is optional, but if it is used then it must come at the end.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;condition&amp;gt;&lt;/code&gt; is a &lt;code&gt;LOGICAL&lt;/code&gt; variable or a logical test. The logical
operators in Fortran are &lt;code&gt;==&lt;/code&gt;, &lt;code&gt;/=&lt;/code&gt;, &lt;code&gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;gt;=&lt;/code&gt;,
&lt;code&gt;&amp;lt;=&lt;/code&gt;, &lt;code&gt;.NOT.&lt;/code&gt;, &lt;code&gt;.AND.&lt;/code&gt;, &lt;code&gt;.OR.&lt;/code&gt;, and &lt;code&gt;.XOR.&lt;/code&gt;. The meaning of all of
these is what
you would expect, except possibly for &lt;code&gt;/=&lt;/code&gt;, which corresponds to “not equal
to.” Fortran can not use &lt;code&gt;!=&lt;/code&gt; because the exclamation mark is the symbol for
a comment.&lt;/p&gt;
&lt;p&gt;&lt;a name="loops"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;Loops&lt;/h4&gt;
&lt;p&gt;The main type of loop which you’ll use in Fortran is a “do-loop,” the equivalent
of a for-loop. This takes the form&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;DO &lt;/span&gt;&lt;span class="nb"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;upper&lt;/span&gt;&lt;span class="p"&gt;[,&lt;/span&gt; &lt;span class="n"&gt;step_size&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;statements&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;END DO&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;where &lt;code&gt;index&lt;/code&gt; is the counter variable in the loop, &lt;code&gt;lower&lt;/code&gt; is the
lower bound, &lt;code&gt;upper&lt;/code&gt; is the upper bound, and &lt;code&gt;step_size&lt;/code&gt; is the increment
by which to increase the index. The upper and lower bounds are inclusive.&lt;/p&gt;
&lt;p&gt;There are also while loops, which have the syntax&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;DO WHILE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;condition&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;statements&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;END DO&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can exit a loop with the command &lt;code&gt;EXIT&lt;/code&gt;, or skip to the next iteration
with the command &lt;code&gt;CYCLE&lt;/code&gt;. The &lt;code&gt;EXIT&lt;/code&gt; command allows us to use the loop structure&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;DO&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;statements&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;END DO&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;which would otherwise be an infinite loop.&lt;/p&gt;
&lt;p&gt;&lt;a name="instructions"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Getting Instructions from the User&lt;/h3&gt;
&lt;p&gt;We need our program to read in data provided by the user. The best way to do
this is to read it from a text file. We could simply “hardcode” into the
program the name of the file in which the data is to be placed. However,
it would be preferable if the user were to be able to over-ride this default.
The same applies for the file to which we want our results to be written.
We could simply ask the user for the file names when the program is running,
but this is rather ungainly. A far nicer solution is for the user to, if they
desire, specify the file names as command-line arguments. To accomplish this
we use the following bit of code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;num_args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;COMMAND_ARGUMENT_COUNT&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;IF&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;num_args&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;CALL &lt;/span&gt;&lt;span class="nb"&gt;GET_COMMAND_ARGUMENT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;infile&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;IF&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;num_args&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;CALL &lt;/span&gt;&lt;span class="nb"&gt;GET_COMMAND_ARGUMENT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;outfile&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The first line here asks for the number of command-line arguments which
have been provided. If any have been then the first will be the file
containing the data to be read in and we will place that data in the
appropriate string variable (&lt;code&gt;infile&lt;/code&gt;). If there is also a second argument
then it will
be the name of the file to which to output the data, and it will also
be placed in the appropriate variable (&lt;code&gt;outfile&lt;/code&gt;). The default input
and output file names were assigned when &lt;code&gt;infile&lt;/code&gt; and &lt;code&gt;outfile&lt;/code&gt; were declared.&lt;/p&gt;
&lt;p&gt;In this snippet of code there are a few things worth noting.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;I make use of two intrinsic procedures: the function
&lt;code&gt;COMMAND_ARGUMENT_COUNT&lt;/code&gt; and the subroutine &lt;code&gt;GET_COMMAND_ARGUMENT&lt;/code&gt;. I will
explain subroutines and functions in more detail soon. These two procedures
happen to be part of the Fortran 2008 standard. Most compilers featured
equivalent functions prior to the 2008 standard, but there was never any
guarantee that they would be the same between compilers.&lt;/li&gt;
&lt;li&gt;We encounter variable assignment in the first line. This is unremarkable
and just like every other high-level programming language. Values are
also assigned in second and third line, but to the arguments of a subroutine.
More on that in a bit.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a name="reading"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Reading and Writing Data&lt;/h3&gt;
&lt;p&gt;Now that we know the names of the input and output files, we want to write
the code needed to actually perform input and output. If there was one
thing that I could change about Fortran, it would be how it does &lt;span class="caps"&gt;IO&lt;/span&gt;; the
technique it uses is old-fashioned and extremely clunky.&lt;/p&gt;
&lt;p&gt;First, we must open a file. To do this, we use the command
&lt;code&gt;OPEN(unit, FILE='&amp;lt;filename&amp;gt;'[, &amp;lt;other options&amp;gt;])&lt;/code&gt;. The unit is an integer,
specifying which &lt;span class="caps"&gt;IO&lt;/span&gt; “stream” we want to use. There are a few which are reserved:
0 for standard-error, 5 for standard-in, and 6 for standard-out. You should
use a positive integer less than 100. Perhaps the most important of the
other options which may be used when opening a file is &lt;code&gt;STATUS="..."&lt;/code&gt;. The
string may be set to “unknown,” indicating that we don’t know whether or not
the file already exists, “new,” indicating that the file should &lt;em&gt;not&lt;/em&gt; already
exist, or “old,” indicating that the file &lt;em&gt;should&lt;/em&gt; already exist. You may
also use the option &lt;code&gt;IOSTAT=variable&lt;/code&gt;, where &lt;code&gt;variable&lt;/code&gt; should be an
integer. If, after the operation has been completed, &lt;code&gt;variable&lt;/code&gt; is equal to
zero, then it was successful. Otherwise, it indicates that there was an error
of some sort. Without specifying an &lt;code&gt;IOSTAT&lt;/code&gt; the program would crash on you.&lt;/p&gt;
&lt;p&gt;To open our input file, we use the code&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;! Read in data from the input file&lt;/span&gt;
&lt;span class="k"&gt;OPEN&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;UNIT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;FILE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;infile&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;IOSTAT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ioval&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;STATUS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'old'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;IF&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;ioval&lt;/span&gt; &lt;span class="o"&gt;/=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;THEN&lt;/span&gt; &lt;span class="c"&gt;! Make sure file exists&lt;/span&gt;
    &lt;span class="k"&gt;WRITE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;filedne&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nb"&gt;TRIM&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;infile&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;STOP&lt;/span&gt;
&lt;span class="k"&gt;END IF&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The statements within the if-statement will write an error message and then
stop the program if there was some problem opening the file.
We see here our first example of actual &lt;span class="caps"&gt;IO&lt;/span&gt;. This is done by the &lt;code&gt;WRITE&lt;/code&gt;
statement, which is writing a message to standard error. The next argument,
&lt;code&gt;filedne&lt;/code&gt; is a format
string. I won’t go into detail about how these work—you can Google it if
you’re interested. Essentially, all that they do is specify how to format the
output of any variables provided. In this case that
variable is &lt;code&gt;TRIM(infile)&lt;/code&gt;, where &lt;code&gt;TRIM()&lt;/code&gt; is a built-in function which
strips any trailing spaces from the string. Instead of using a format string,
you can just replace the variable name with an asterisk, causing Fortran to
automatically format your output for you. This is often sufficient and we
will see examples of it below. The general form for output statements is
&lt;code&gt;WRITE(&amp;lt;unit&amp;gt;,&amp;lt;format-string&amp;gt;) &amp;lt;variables...&amp;gt;&lt;/code&gt;. Here, &lt;code&gt;&amp;lt;variables...&amp;gt;&lt;/code&gt;
are the variables whose values are to be outputted.&lt;/p&gt;
&lt;p&gt;Next we’ll read in the data. Input statements are very similar to output
statements, except that &lt;code&gt;WRITE&lt;/code&gt; is replaced with &lt;code&gt;READ&lt;/code&gt;. The general form
is &lt;code&gt;READ(&amp;lt;unit&amp;gt;,&amp;lt;format-string&amp;gt;) &amp;lt;variables...&amp;gt;&lt;/code&gt;. In this case, the input
data will be placed into the variables we specify in &lt;code&gt;&amp;lt;variables&amp;gt;&lt;/code&gt;. Input
is done line-by-line with as many variables filled as possible, given the
amount of data on the line. For input you should almost always use an asterisk
instead of a format string. An additional argument which can be provided for
&lt;code&gt;READ&lt;/code&gt; statements is an &lt;code&gt;IOSTAT&lt;/code&gt;. This works in exactly the same way as
in the &lt;code&gt;OPEN&lt;/code&gt; statement and can be useful to know when you’ve read to the
end of a file.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;DO &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;data_max&lt;/span&gt; &lt;span class="c"&gt;! Read until end of file or reach maximum amount of data&lt;/span&gt;
    &lt;span class="k"&gt;READ&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;IOSTAT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ioval&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;postn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;potntl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;IF&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;ioval&lt;/span&gt; &lt;span class="o"&gt;/=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;THEN&lt;/span&gt;
&lt;span class="k"&gt;        &lt;/span&gt;&lt;span class="n"&gt;data_size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;EXIT&lt;/span&gt;
&lt;span class="k"&gt;    END IF&lt;/span&gt;
&lt;span class="k"&gt;    IF&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;data_max&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;WRITE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s1"&gt;'POTENTIAL_FIELD: Could not read '&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;   &lt;span class="p"&gt;&amp;amp;&lt;/span&gt;
        &lt;span class="s1"&gt;'all input data. Truncated after '&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data_max&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;' elements.'&lt;/span&gt;
&lt;span class="k"&gt;END DO&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This bit of code will read in as much data from the file as we have room for in
our arrays, storing it in the arrays &lt;code&gt;postn&lt;/code&gt; and &lt;code&gt;potntl&lt;/code&gt;. If it reaches
the end of the file then it will remember the amount of data read in and exit
the loop. If it reaches the end of the array then it will print a warning
message saying that some of the data may have been truncated. The two slashses
that you see in the &lt;code&gt;WRITE&lt;/code&gt; statement are the concatenation operator.&lt;/p&gt;
&lt;p&gt;Now that we’re done with the input file, we’ll close it using the command
&lt;code&gt;CLOSE(&amp;lt;unit&amp;gt;)&lt;/code&gt;. In this case we simply add the line &lt;code&gt;CLOSE(10)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;After all of this, outputting our results will seem easy. This is done
with the following code fragment which will go after the actual calculations
in our program&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;! Send the data to the output file&lt;/span&gt;
&lt;span class="k"&gt;OPEN&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;FILE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;outfile&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;STATUS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'unknown'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;WRITE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s1"&gt;'#Position                   Field Strength'&lt;/span&gt;
&lt;span class="k"&gt;DO &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data_size&lt;/span&gt;
    &lt;span class="k"&gt;WRITE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;postn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;field&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;END DO&lt;/span&gt;
&lt;span class="k"&gt;CLOSE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There is little to remark upon here, except to note that the first line
we write to the file is&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#Position                   Field Strength
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This provides a header for the file. Most pieces of plotting software know to
ignore lines beginning with a hash-sign. Thus, this provides a way to remind
yourself what the data in your file are, without getting in the way if you want
to make a graph from it. I consider it to be good style to put such a header
at the top of all of your data files.&lt;/p&gt;
&lt;p&gt;&lt;a name="procedures"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Procedures&lt;/h3&gt;
&lt;p&gt;When writing a program, it is often useful to place some of your code into
subprograms. There are two main reasons for this.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;It allows the code to be executed multiple times without having to be
   rewritten each time.&lt;/li&gt;
&lt;li&gt;It allows the code to be reused in future programs.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In Fortran we call these “procedures.” In most languages they are called
“methods.” Fortran has two types of procedures: functions and subroutines.
Functions produce a value and are akin to the methods that you see in
other languages. Subroutines do not produce a value and are similar to void
methods in other languages.&lt;/p&gt;
&lt;p&gt;It is best to place any procedures at the end of your program. Just below
where your program ends (after the &lt;code&gt;STOP&lt;/code&gt; command) type a line containing only
the word &lt;code&gt;CONTAINS&lt;/code&gt;. Place your procedures below that and before the end of
the program.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;PROGRAM &lt;/span&gt;&lt;span class="n"&gt;potential_field&lt;/span&gt;
    &lt;span class="k"&gt;IMPLICIT NONE&lt;/span&gt;

    &lt;span class="c"&gt;! Variable declarations&lt;/span&gt;
    &lt;span class="c"&gt;! ...&lt;/span&gt;
&lt;span class="c"&gt;!---------------------------------------!&lt;/span&gt;

    &lt;span class="c"&gt;! Main program&lt;/span&gt;
    &lt;span class="c"&gt;! ...&lt;/span&gt;

    &lt;span class="k"&gt;STOP&lt;/span&gt;
&lt;span class="k"&gt;CONTAINS&lt;/span&gt;
    &lt;span class="c"&gt;! Subroutines and functions&lt;/span&gt;
    &lt;span class="c"&gt;! ...&lt;/span&gt;

&lt;span class="k"&gt;END PROGRAM &lt;/span&gt;&lt;span class="n"&gt;potential_field&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There is another way to package procedures, using “modules.” I’ll
explain those later. I should also mention that it is possible to place your
procedures entirely outside of any program or module and in older versions of
Fortran this was the only option. However, unless you need to do this in order
to work with some legacy code, this is not a practice that I would
recommend.&lt;sup id="fnref:3"&gt;&lt;a class="footnote-ref" href="#fn:3" rel="footnote"&gt;3&lt;/a&gt;&lt;/sup&gt;
When procedures are stored in this way, the compiler won’t be able to check
that you have passed the correct number and types of arguments and these bugs
are, in my experience, immensely frustrating to catch.&lt;/p&gt;
&lt;p&gt;&lt;a name="pass"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;Pass by Reference&lt;/h4&gt;
&lt;p&gt;In most programming languages, when you pass a variable to a method as an
argument, a new
copy of that variable is created for the method to use. This variable will
then be deleted once the method has finished executing. This technique is call
“pass by value.” Fortran, however, works differently. Instead of creating
a copy of the passed variable, the procedure will be told where the original
variable is located and will then access the original whenever the variable
is used. This is called “pass by reference.”&lt;/p&gt;
&lt;p&gt;If you are only using the variable’s value as input then this is irrelevant to
the end user. However, if you modify the value of an argument in the procedure,
then that modification will be reflected in the  calling
program once the procedure has finished executing. At the end of the day, what
this means is that we have a way for procedures to return multiple pieces of
information. This also means that whether you use a function or a subroutine
is entirely a matter of taste. Typically, I will use a function if I only
want to return a single value. They are particularly useful for representing
mathematical functions in numerical routines such as root-finders, integrators,
&lt;span class="caps"&gt;ODE&lt;/span&gt; solvers, etc. I use a subroutine if I know that I want to return multiple
variables. You will see an example of each in the program we are writing today.&lt;/p&gt;
&lt;p&gt;&lt;a name="functions"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;Functions&lt;/h4&gt;
&lt;p&gt;I wrote a function to calculate derivatives. The basic syntax
for such a function is&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;FUNCTION &lt;/span&gt;&lt;span class="n"&gt;differentiate&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;independent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dependent&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;IMPLICIT NONE&lt;/span&gt;
    &lt;span class="c"&gt;! Argument declarations&lt;/span&gt;
    &lt;span class="kt"&gt;REAL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;DIMENSION&lt;/span&gt;&lt;span class="p"&gt;(:),&lt;/span&gt; &lt;span class="k"&gt;INTENT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IN&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;span class="kd"&gt;::&lt;/span&gt;  &lt;span class="n"&gt;dependent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;                     &lt;span class="p"&gt;&amp;amp;&lt;/span&gt;
                                            &lt;span class="n"&gt;independent&lt;/span&gt;
    &lt;span class="kt"&gt;REAL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;DIMENSION&lt;/span&gt;&lt;span class="p"&gt;(:),&lt;/span&gt; &lt;span class="k"&gt;ALLOCATABLE&lt;/span&gt;  &lt;span class="kd"&gt;::&lt;/span&gt;  &lt;span class="n"&gt;differentiate&lt;/span&gt;
    &lt;span class="c"&gt;! Local variables&lt;/span&gt;
    &lt;span class="c"&gt;! ...&lt;/span&gt;

    &lt;span class="c"&gt;! Perform the calculation&lt;/span&gt;
    &lt;span class="c"&gt;! ...&lt;/span&gt;
    &lt;span class="k"&gt;RETURN&lt;/span&gt;
&lt;span class="k"&gt;END FUNCTION &lt;/span&gt;&lt;span class="n"&gt;differentiate&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We see that this function is called &lt;code&gt;differentiate&lt;/code&gt; and takes two arguments:
&lt;code&gt;independent&lt;/code&gt; and &lt;code&gt;dependent&lt;/code&gt;. While programs are ended with the keyword
&lt;code&gt;STOP&lt;/code&gt;, functions (and subroutines) are ended with the keyword &lt;code&gt;RETURN&lt;/code&gt;.
We call the function with&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;field&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;data_size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;differentiate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;postn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;data_size&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;potntl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;data_size&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;(1:data_size)&lt;/code&gt; is an example of “array-slice notation.” More on that later.&lt;/p&gt;
&lt;p&gt;Unlike languages based on C, arguments are not declared in the argument list
but in the body of the procedure alongside the local variables. You also need
to declare the return variable, which, by default, has the same name as the
function. When
declaring the arguments you should add the attribute &lt;code&gt;INTENT(&amp;lt;value&amp;gt;)&lt;/code&gt; where
&lt;code&gt;&amp;lt;value&amp;gt;&lt;/code&gt; may be &lt;code&gt;IN&lt;/code&gt;, &lt;code&gt;OUT&lt;/code&gt;, or &lt;code&gt;INOUT&lt;/code&gt;. The first instructs the
compiler that the value of the argument must not be changed within the
procedure, while the second tells the compiler that the variable &lt;em&gt;must&lt;/em&gt; have a
new value assigned to it within the procedure. The initial value of this
argument in the procedure is not guaranteed to be the same as the one it held
prior to being passed. The final option basically tells
the compiler that there are no such requirements for that argument and is the
default case if you omit the &lt;code&gt;INTENT&lt;/code&gt; attribute. No &lt;code&gt;INTENT&lt;/code&gt; should be
given to the return variable, although it is treated as if it were declared
with &lt;code&gt;INTENT(OUT)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Something which you may have noticed here is how we declared our input arrays
with &lt;code&gt;DIMENSION(:)&lt;/code&gt;. This syntax can be used for procedure arguments to
indicate that the size of the array is not known in advance. The size will be
set to be however large the array passed to the procedure is. A similar
notation is used for our return value, but that’s because it is an
&lt;code&gt;ALLOCATABLE&lt;/code&gt; array. More on that in the sidebar below.&lt;/p&gt;
&lt;p&gt;The full code for this function is provided below.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;FUNCTION &lt;/span&gt;&lt;span class="n"&gt;differentiate&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;independent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dependent&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;IMPLICIT NONE&lt;/span&gt;

    &lt;span class="c"&gt;! Input and output variables&lt;/span&gt;
    &lt;span class="kt"&gt;REAL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;DIMENSION&lt;/span&gt;&lt;span class="p"&gt;(:),&lt;/span&gt; &lt;span class="k"&gt;INTENT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IN&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;span class="kd"&gt;::&lt;/span&gt;  &lt;span class="n"&gt;dependent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;                     &lt;span class="p"&gt;&amp;amp;&lt;/span&gt;
                                            &lt;span class="n"&gt;independent&lt;/span&gt;
    &lt;span class="kt"&gt;REAL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;DIMENSION&lt;/span&gt;&lt;span class="p"&gt;(:),&lt;/span&gt; &lt;span class="k"&gt;ALLOCATABLE&lt;/span&gt;  &lt;span class="kd"&gt;::&lt;/span&gt;  &lt;span class="n"&gt;differentiate&lt;/span&gt;

    &lt;span class="c"&gt;! Local variables&lt;/span&gt;
    &lt;span class="kt"&gt;INTEGER&lt;/span&gt; &lt;span class="kd"&gt;::&lt;/span&gt;  &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;                                                         &lt;span class="p"&gt;&amp;amp;&lt;/span&gt;
                &lt;span class="n"&gt;ret_size&lt;/span&gt;
&lt;span class="c"&gt;!--------------------------------------------------------------------------!&lt;/span&gt;

    &lt;span class="c"&gt;! Figure out how much data there is to process&lt;/span&gt;
    &lt;span class="n"&gt;ret_size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;MIN&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SIZE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dependent&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="n"&gt;SIZE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;independent&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;ALLOCATE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;differentiate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;ret_size&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="c"&gt;! Calculate derivative for first data-point&lt;/span&gt;
    &lt;span class="n"&gt;differentiate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dependent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;dependent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;independent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;     &lt;span class="p"&gt;&amp;amp;&lt;/span&gt;
        &lt;span class="n"&gt;independent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="c"&gt;! Calculate derivative for data-points in the middle&lt;/span&gt;
    &lt;span class="k"&gt;FORALL&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:(&lt;/span&gt;&lt;span class="n"&gt;ret_size&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="n"&gt;differentiate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dependent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;     &lt;span class="p"&gt;&amp;amp;&lt;/span&gt;
        &lt;span class="n"&gt;dependent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;independent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;independent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="c"&gt;! Calculate the derivative for the last data-point&lt;/span&gt;
    &lt;span class="n"&gt;differentiate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ret_size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dependent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ret_size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;                       &lt;span class="p"&gt;&amp;amp;&lt;/span&gt;
        &lt;span class="n"&gt;dependent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ret_size&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;independent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ret_size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;                    &lt;span class="p"&gt;&amp;amp;&lt;/span&gt;
        &lt;span class="n"&gt;independent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ret_size&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="k"&gt;RETURN&lt;/span&gt;
&lt;span class="k"&gt;END FUNCTION &lt;/span&gt;&lt;span class="n"&gt;differentiate&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I should mention that Fortran comes with a number of built-in functions. In
particular, it has all of the mathematical functions that you’d expect. We
also so the &lt;code&gt;MIN()&lt;/code&gt; and &lt;code&gt;SIZE()&lt;/code&gt; intrinsic functions. The first returns
the smallest value in a list of arguments or in an array. The second returns
the number of elements in an array.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Sidebar:&lt;/strong&gt; You may notice that our return-variable here is declared with
the attribute &lt;code&gt;ALLOCATABLE&lt;/code&gt;. By default, Fortran arrays are static, meaning
that they have a fixed length determined at compile-time. However, sometimes
you might not know what size you want at compile-time or you might want to
adjust the size part way through your program. (Here it is the former.)
In that case, you use
an allocatable array. When first declared, these arrays have no determined size,
although you do have to specify their rank by using colons in the &lt;code&gt;DIMENSION&lt;/code&gt;
attribute. For example, a 3D array would be declared with &lt;code&gt;DIMENSION(:,:,:)&lt;/code&gt;.
Once you know they size you want, you allocate them as follows&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;ALLOCATE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;upper&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;where &lt;code&gt;lower&lt;/code&gt; is the index which you want the array to start at while
&lt;code&gt;upper&lt;/code&gt; is the index that you want it to end at. These bounds are inclusive.
Once you are done with the array, you can deallocate it with
&lt;code&gt;DEALLOCATE(array)&lt;/code&gt;. You can then reallocate
it again (potentially to a different size) if you wish. When a procedure
exits, all local allocatable arrays are automatically deallocated.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Sidebar 2:&lt;/strong&gt; Another new feature which I’ve introduced here is the &lt;code&gt;FORALL&lt;/code&gt;
construct. This structure is used for array assignment and manipulation. It
behaves similarly to a loop, but there are some important
differences. From the old array, it will calculate values for the new array
and place them in temporary storage. Once it has calculated the value for every
element it will place them in the new array. The forall construct may iterate
over the array in any order. Its main purpose is to
make it easier for the compiler to optimize your code and run it on parallel
architectures, but it is also just a convenient way of writing certain
expressions. You can learn more &lt;a href="http://en.wikipedia.org/wiki/Fortran_95_language_features#The_FORALL_Statement_and_Construct"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a name="subroutines"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;Subroutines&lt;/h4&gt;
&lt;p&gt;In our programming exercise, I used a subroutine to calculate
some statistical information. The basic syntax for such a subroutine is given below.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SUBROUTINE &lt;/span&gt;&lt;span class="n"&gt;stats&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="k"&gt;array&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mean&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stdev&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;IMPLICIT NONE&lt;/span&gt;
    &lt;span class="c"&gt;! Argument declarations&lt;/span&gt;
    &lt;span class="kt"&gt;REAL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;DIMENSION&lt;/span&gt;&lt;span class="p"&gt;(:),&lt;/span&gt; &lt;span class="k"&gt;INTENT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IN&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;span class="kd"&gt;::&lt;/span&gt;  &lt;span class="k"&gt;array&lt;/span&gt;
&lt;span class="k"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;REAL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;INTENT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;OUT&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                &lt;span class="kd"&gt;::&lt;/span&gt;  &lt;span class="n"&gt;mean&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;                          &lt;span class="p"&gt;&amp;amp;&lt;/span&gt;
                                            &lt;span class="n"&gt;stde&lt;/span&gt;
    &lt;span class="c"&gt;! Local variables&lt;/span&gt;
    &lt;span class="c"&gt;! ...&lt;/span&gt;

    &lt;span class="c"&gt;!Perform the calculation&lt;/span&gt;
    &lt;span class="c"&gt;!...&lt;/span&gt;
    &lt;span class="k"&gt;RETURN&lt;/span&gt;
&lt;span class="k"&gt;END SUBROUTINE &lt;/span&gt;&lt;span class="n"&gt;stats&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Other than the fact that you don’t need to declare a return value, there isn’t
much to say about subroutines which wasn’t covered in the discussion about
functions.  The full code for the subroutine is&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SUBROUTINE &lt;/span&gt;&lt;span class="n"&gt;stats&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="k"&gt;array&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mean&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stdev&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;IMPLICIT NONE&lt;/span&gt;

    &lt;span class="c"&gt;! Input and output variables&lt;/span&gt;
    &lt;span class="kt"&gt;REAL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;DIMENSION&lt;/span&gt;&lt;span class="p"&gt;(:),&lt;/span&gt; &lt;span class="k"&gt;INTENT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IN&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;span class="kd"&gt;::&lt;/span&gt;  &lt;span class="k"&gt;array&lt;/span&gt;
&lt;span class="k"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;REAL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;INTENT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;OUT&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                &lt;span class="kd"&gt;::&lt;/span&gt;  &lt;span class="n"&gt;mean&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;                          &lt;span class="p"&gt;&amp;amp;&lt;/span&gt;
                                            &lt;span class="n"&gt;stdev&lt;/span&gt;

    &lt;span class="c"&gt;! Local variables&lt;/span&gt;
    &lt;span class="kt"&gt;INTEGER&lt;/span&gt; &lt;span class="kd"&gt;::&lt;/span&gt;  &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;                                                         &lt;span class="p"&gt;&amp;amp;&lt;/span&gt;
                &lt;span class="n"&gt;num&lt;/span&gt;
    &lt;span class="kt"&gt;REAL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kd"&gt;::&lt;/span&gt;  &lt;span class="n"&gt;running_tot&lt;/span&gt;
&lt;span class="c"&gt;!--------------------------------------------------------------------------!&lt;/span&gt;

    &lt;span class="c"&gt;! Compute the mean&lt;/span&gt;
    &lt;span class="n"&gt;num&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SIZE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;array&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;mean&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;SUM&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;array&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="kt"&gt;REAL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c"&gt;! Compute the standard deviation&lt;/span&gt;
    &lt;span class="k"&gt;DO &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;
        &lt;span class="n"&gt;running_tot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;running_tot&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="k"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;mean&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
    &lt;span class="k"&gt;END DO&lt;/span&gt;
&lt;span class="k"&gt;    &lt;/span&gt;&lt;span class="n"&gt;stdev&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;SQRT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;1.&lt;/span&gt;&lt;span class="n"&gt;d0&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="kt"&gt;REAL&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;running_tot&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;RETURN&lt;/span&gt;
&lt;span class="k"&gt;END SUBROUTINE &lt;/span&gt;&lt;span class="n"&gt;stats&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a name="array"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Array Syntax&lt;/h3&gt;
&lt;p&gt;Fortran features powerful array syntax, similar to what is available in
Python. The simplest bit of this syntax is if you want an array which,
element by element, is the sum of two other arrays of the same size. You
simply use the syntax
&lt;code&gt;array1 = array2 + array3&lt;/code&gt;. You can use similar syntax for just about any 
operation on an array, including single-argument operators and operators with
scalars:
&lt;code&gt;array1 = array2 + scalar&lt;/code&gt;. In this case &lt;code&gt;scalar&lt;/code&gt; will be treated as though
it were an array of the same size as &lt;code&gt;array1&lt;/code&gt; and &lt;code&gt;array2&lt;/code&gt; where every
element had the same value as &lt;code&gt;scalar&lt;/code&gt;. With the right keywords, you can even
apply your own functions and subroutines to arrays in this way.&lt;/p&gt;
&lt;p&gt;More advanced results can be achieved using array-slice notation. This allows
you to work with only a portion of an array. The syntax is
&lt;code&gt;array([lower]:[upper][:stride])&lt;/code&gt;. This returns an array containing every
&lt;code&gt;stride&lt;/code&gt;&lt;sup&gt;th&lt;/sup&gt; element of &lt;code&gt;array&lt;/code&gt; starting at &lt;code&gt;lower&lt;/code&gt; and ending at &lt;code&gt;upper&lt;/code&gt;. 
By default &lt;code&gt;increment&lt;/code&gt; is 1,
&lt;code&gt;lower&lt;/code&gt; is index at which &lt;code&gt;array&lt;/code&gt; starts, and &lt;code&gt;upper&lt;/code&gt; is the index at
which &lt;code&gt;array&lt;/code&gt; ends. Thus, &lt;code&gt;array(:)&lt;/code&gt;
corresponds to the whole array.
The slice syntax can be used in multidimensional arrays too,
with any mix you please of array-slices and specific indices in the different
directions. For example, if we had a 3D array with 100 elements in each
dimension we could specify &lt;code&gt;array3d(:,1:25,50)&lt;/code&gt; would give you the a 2D array
with dimensions 100 by 25.&lt;/p&gt;
&lt;p&gt;I used array slices a few times in our program. One example is when the program
calculates the electric field:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;field&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;data_size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;differentiate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;postn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;data_size&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;potntl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;data_size&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;field&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;data_size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;1.0&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;field&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;data_size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The first line here calculates the derivative of the data in the arrays
&lt;code&gt;postn&lt;/code&gt; and &lt;code&gt;potntl&lt;/code&gt; up to the &lt;code&gt;data_size&lt;/code&gt;&lt;sup&gt;th&lt;/sup&gt; element, storing
the results in &lt;code&gt;field&lt;/code&gt;. The second line multiplies the elements of &lt;code&gt;field&lt;/code&gt;
containing useful data by -1. These were very simple uses of array-slices and
shows only some of their power.&lt;/p&gt;
&lt;p&gt;&lt;a name="compiling"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Compiling and Running Your Program&lt;/h3&gt;
&lt;p&gt;We now have a working program. As a reminder, you can
&lt;a href="https://politicalphysicist.github.io/attachments/fortran/potential_field.f90"&gt;download it here&lt;/a&gt;.
It’s time to compile it and see if it works! The Fortran compiler which you
will use most often is &lt;code&gt;gfortran&lt;/code&gt;. This is a decent compiler&lt;sup id="fnref:4"&gt;&lt;a class="footnote-ref" href="#fn:4" rel="footnote"&gt;4&lt;/a&gt;&lt;/sup&gt; and has the
advantage of being free software.&lt;sup id="fnref:5"&gt;&lt;a class="footnote-ref" href="#fn:5" rel="footnote"&gt;5&lt;/a&gt;&lt;/sup&gt; If you are running Linux then you can
install it using &lt;code&gt;sudo apt-get install gfortran&lt;/code&gt; (assuming it’s
Debian, Ubuntu, Mint, or one of their derivatives—I don’t know how to use other
distro’s package managers). Otherwise you can
&lt;a href="https://gcc.gnu.org/wiki/GFortranBinaries"&gt;download it here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Compiling and running a simple program like this is very easy; just type
&lt;code&gt;gfortran ./potential_field.f90&lt;/code&gt; at the command line in the directory where
you’ve kept your source code. This will produce the executable file called
&lt;code&gt;a.out&lt;/code&gt;. To run the program, type &lt;code&gt;./a.out&lt;/code&gt;. Before running it, make
sure that you have a file containing your data on the electrical potential
called “in.dat”. If you use the &lt;a href="https://politicalphysicist.github.io/attachments/fortran/in.dat"&gt;in.dat&lt;/a&gt;
file provided here then you should get the following output:&lt;/p&gt;
&lt;p&gt;&lt;img alt="What you should see in your terminal when you run with the input data provided here." src="https://politicalphysicist.github.io/images/fortran/output.png" style="float:none;display:block;margin-left:auto;margin-right:auto"/&gt;&lt;/p&gt;
&lt;p&gt;The output file &lt;code&gt;out.dat&lt;/code&gt; should match &lt;a href="https://politicalphysicist.github.io/attachments/fortran/out.dat"&gt;this one&lt;/a&gt;.
You should see an
electric field that rounds to 20 &lt;span class="caps"&gt;NC&lt;/span&gt;&lt;sup&gt;-1&lt;/sup&gt; everywhere. Don’t worry if
your numbers vary from mine in the last few decimal places.
The last decimal places of floating point values often vary from computer to
computer and from compiler to compiler because of the finite levels of
precision with which floating point numbers can be stored.&lt;/p&gt;
&lt;p&gt;If your input data is contained in some file other than &lt;code&gt;in.dat&lt;/code&gt; then you
can run the
program using the command &lt;code&gt;./a.out infile&lt;/code&gt;. If you want your output
data to go to a file other than &lt;code&gt;out.dat&lt;/code&gt; then run the program with the
command &lt;code&gt;./a.out infile outfile&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;You could also compile your program with the command
&lt;code&gt;gfortran -o potential_field potential_field.f90&lt;/code&gt;. This will produce an
executable called &lt;code&gt;potential_field&lt;/code&gt;. Had a different argument been placed
after the &lt;code&gt;-o&lt;/code&gt; flag then that would have been the name of the executable.
The program would now be run using the command &lt;code&gt;./potential_field&lt;/code&gt;. Once
again, you can optionally extra arguments specifying the input and output files.&lt;/p&gt;
&lt;p&gt;&lt;a name="packaging"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Packaging Your Procedures&lt;/h3&gt;
&lt;p&gt;For a small, simple program like this it is easiest to keep everything in one
file. However, as your program becomes larger, it will become desirable to
put certain things into separate files. This prevents files from becoming
overwhelmingly huge.&lt;sup id="fnref:6"&gt;&lt;a class="footnote-ref" href="#fn:6" rel="footnote"&gt;6&lt;/a&gt;&lt;/sup&gt; It also means that if you want to reuse some of your
procedures in other programs, it will be a lot easier to transfer them over.
If you compile them correctly (not something we’ll get into here) then you
won’t even need to transfer them—you can use the same “library” file for
multiple programs.&lt;/p&gt;
&lt;p&gt;In order to retain the compiler’s ability to know whether we are passing the
correct arguments to a procedure we need to place that procedures in a “module”.
Modules are a bit like programs, containing both variables and
procedures (also “derived types,” in case you ever want to use them). However,
unlike programs, they can not be run on their own; they just contain code to
be used by other modules and programs. The basic syntax for our module is&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;MODULE &lt;/span&gt;&lt;span class="n"&gt;tools&lt;/span&gt;
    &lt;span class="k"&gt;IMPLICIT NONE&lt;/span&gt;

    &lt;span class="c"&gt;!Variable declarations&lt;/span&gt;
    &lt;span class="c"&gt;! ...&lt;/span&gt;

&lt;span class="k"&gt;CONTAINS&lt;/span&gt;
    &lt;span class="c"&gt;! Procedures&lt;/span&gt;
    &lt;span class="c"&gt;! ...&lt;/span&gt;

&lt;span class="k"&gt;END MODULE &lt;/span&gt;&lt;span class="n"&gt;tools&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If your module does not contain any procedures then omit the &lt;code&gt;CONTAINS&lt;/code&gt;
statement.&lt;/p&gt;
&lt;p&gt;To make a module’s contents available to a program (or another module) you
place a &lt;code&gt;USE&lt;/code&gt; statement followed by the module name at the very start of your
program—before even the
&lt;code&gt;IMPLICIT NONE&lt;/code&gt; statement. In our case this means that our program starts with&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;PROGRAM &lt;/span&gt;&lt;span class="n"&gt;potential_field&lt;/span&gt;
    &lt;span class="k"&gt;USE &lt;/span&gt;&lt;span class="n"&gt;tools&lt;/span&gt;
    &lt;span class="k"&gt;IMPLICIT NONE&lt;/span&gt;
    &lt;span class="c"&gt;! ...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you need to load multiple modules then you place additional &lt;code&gt;USE&lt;/code&gt;
statements at the start of the program, each on its own line. Take a look at
the &lt;a href="https://politicalphysicist.github.io/attachments/fortran/tools_mod.f90"&gt;module&lt;/a&gt; and
&lt;a href="https://politicalphysicist.github.io/attachments/fortran/potential_field2.f90"&gt;modified program&lt;/a&gt; to
see what changes were made.&lt;/p&gt;
&lt;p&gt;The main disadvantage of using modules (although it’s one that can be
overcome with sufficient
organization and/or appropriate software tools) is that it
makes the compile process more
complicated. It is important that module files are compiled &lt;em&gt;before&lt;/em&gt; any
files which use them. This is because, upon compiling the module into an
“object file,” the compiler will produce a file ending in the extension
&lt;code&gt;.mod&lt;/code&gt;. This file contains information for the compiler about the contents of
the module and which will need to read as it compiles anything that
uses the module. Needless to say, if you have modules using other modules then
things can get complicated.&lt;/p&gt;
&lt;p&gt;In this case we can compile like so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gfortran -c tools_mod.f90
gfortran -c potential_field2.f90
gfortran -o potential_field2 tools_mod.o potential_field2.o
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Aside from the change in the name of the executable, the program can be run
just as before.&lt;/p&gt;
&lt;p&gt;&lt;img alt="What you should see in your terminal when you compile and run our rewritten version of the program." src="https://politicalphysicist.github.io/images/fortran/output2.png" style="float:none;display:block;margin-left:auto;margin-right:auto"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;a name="summing"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Summing Up&lt;/h3&gt;
&lt;p&gt;There you have it. You’ve now seen how various features in Fortran work and
seen an example of a working program. Although this was a lot of information
all at once, Fortran really isn’t a hard language to learn. The syntax is
intuitive and the modern version comes with enough features to be useful but
not so many as be overwhelming. Don’t feel bad if you’ve forgotten some of the
syntax that I’ve gone over—even experienced programmers will occasionally have
to look something up. Hopefully now you’ll feel ready to try writing a program
of your own in Fortran and begin learning the language’s capabilities and
limitations in the best way possible: through experience.&lt;/p&gt;
&lt;p&gt;&lt;a name="resources"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Useful Resources&lt;/h3&gt;
&lt;p&gt;There are plenty of features in Fortran which I have not mentioned. If you want
to learn more about them, some useful links are given below:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="http://en.wikipedia.org/wiki/Fortran_95_language_features"&gt;Fortran 95 language features&lt;/a&gt;:&lt;/strong&gt;
A Wikipedia article which gives a good overview of the various capabilities of
Fortran 95. I regularly use this as a reference when I forget some syntax.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="http://www.cs.rpi.edu/~szymansk/OOF90/bugs.html"&gt;Mistakes in Fortran 90 Programs that Might Surprise You&lt;/a&gt;:&lt;/strong&gt;
A webpage describing some of the more obscure behaviour of Fortran. It’s good to be familiar with what these are. If your program
is behaving strangely, these are all good things to check for.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="http://www.cs.mtu.edu/~shene/COURSES/cs201/NOTES/chap05/format.html"&gt;Fortran Formats&lt;/a&gt;:&lt;/strong&gt;
Some information on how format strings can be used to specify output (and,
in principle, input) in Fortran.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="https://gcc.gnu.org/onlinedocs/gfortran/"&gt;The &lt;span class="caps"&gt;GNU&lt;/span&gt; Fortran Compiler&lt;/a&gt;:&lt;/strong&gt;
The manual for gfortran, the main free compiler. In my opinion it is the best
documented compiler out there. Particularly useful is its list of intrinsic
functions and subroutines, which comes with information and, usually, an example
for each one.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="ftp://ftp.nag.co.uk/sc22wg5/n1551-n1600/n1579.pdf"&gt;The New Features of Fortran 2003&lt;/a&gt;:&lt;/strong&gt;
A &lt;span class="caps"&gt;PDF&lt;/span&gt; providing an introduction to what’s new in the Fortran 2003 standard.
Note that not all features are yet supported by all compilers.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="ftp://ftp.nag.co.uk/sc22wg5/n1801-n1850/n1828.pdf"&gt;The New Features of Fortran 2008&lt;/a&gt;:&lt;/strong&gt;
A &lt;span class="caps"&gt;PDF&lt;/span&gt; providing an introduction to what’s new in the Fortran 2008 standard.
Note that not all features are yet supported by all compilers.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="footnote"&gt;
&lt;hr/&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;Others including C and C++, when high efficiency is desired, and &lt;span class="caps"&gt;MATLAB&lt;/span&gt; and Python for data processing. &lt;a class="footnote-backref" href="#fnref:1" rev="footnote" title="Jump back to footnote 1 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;For the most part we’ll be sticking to the 1995 standard. The 2003 and 2008 standards, which contain many powerful new features such as object-oriented programming, are still not entirely supported by compilers. You can see their current statuses &lt;a href="http://fortranwiki.org/fortran/show/Fortran+2003+status"&gt;here&lt;/a&gt; and &lt;a href="http://fortranwiki.org/fortran/show/Fortran+2008+status"&gt;here&lt;/a&gt;. That said, enough has been implemented that you can now write object-oriented code in Fortran if you are using a relatively up-to-date compiler. &lt;a class="footnote-backref" href="#fnref:2" rev="footnote" title="Jump back to footnote 2 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:3"&gt;
&lt;p&gt;Even when working with legacy code, you can often use what’s called an interface to manually tell the compiler what arguments are required. While these are a bit tedious to write, and thus shouldn’t be used with new code, they are worth your while if you can’t package your procedures in a more modern way. &lt;a class="footnote-backref" href="#fnref:3" rev="footnote" title="Jump back to footnote 3 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:4"&gt;
&lt;p&gt;However, for actual computational physics, you will likely end up using &lt;code&gt;ifort&lt;/code&gt; or &lt;code&gt;pgfortran&lt;/code&gt;, which produce faster programs. Their major disadvantage is that the licenses are extremely expensive. They are also proprietary software. &lt;a class="footnote-backref" href="#fnref:4" rev="footnote" title="Jump back to footnote 4 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:5"&gt;
&lt;p&gt;That’s free as in “free beer” and free as in “free speech”. Another way to say this is that GFortran is open source. However, some—including the &lt;span class="caps"&gt;GNU&lt;/span&gt; Project, which makes GFortran—object to that term and think “free software” is better. It’s one of those &lt;a href="https://www.youtube.com/watch?v=9foi342LXQE"&gt;People’s Front of Judea vs. Judean People’s Front&lt;/a&gt; sort of things. &lt;a class="footnote-backref" href="#fnref:5" rev="footnote" title="Jump back to footnote 5 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:6"&gt;
&lt;p&gt;I know of one case where the developer refuses to split up the code, resulting in a file that is about 130 thousand lines long. It is not my favourite file to have to deal with. &lt;a class="footnote-backref" href="#fnref:6" rev="footnote" title="Jump back to footnote 6 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</summary><category term="Programming"></category><category term="Fortran"></category><category term="High Performance Computing"></category><category term="gfortran"></category></entry><entry><title>I Designed a Website</title><link href="https://politicalphysicist.github.io/i-designed-a-website.html" rel="alternate"></link><published>2014-09-26T11:20:00+01:00</published><updated>2014-09-26T11:20:00+01:00</updated><author><name>C. MacMackin</name></author><id>tag:politicalphysicist.github.io,2014-09-26:i-designed-a-website.html</id><summary type="html">&lt;p&gt;I have recently finished designing a new website for the Saint Mary’s University
Astronomy and Physics Society (&lt;span class="caps"&gt;SMUAPS&lt;/span&gt;). I decided to build this website using
Pelican (the same software that I use for this blog) because of my familiarity
with it and because of the versatility of the software. The website can be found
&lt;a href="http://ap.smu.ca/~smuaps"&gt;here&lt;/a&gt;. If you would like to find
out about the technical details of how the site is designed, see these two
posts:
&lt;a href="http://ap.smu.ca/~smuaps/readme-website-documentation.html"&gt;&lt;span class="caps"&gt;README&lt;/span&gt; (Website Documentation)&lt;/a&gt; and
&lt;a href="http://ap.smu.ca/~smuaps/new-website-design.html"&gt;New Website Design&lt;/a&gt;.&lt;/p&gt;
&lt;figure&gt;&lt;img alt="Screenshot of the new website's home page." src="https://politicalphysicist.github.io/images/smuapsWeb.png"/&gt;&lt;figcaption&gt;Screenshot of the new website’s home page.&lt;/figcaption&gt;
&lt;/figure&gt;</summary><category term="Pelican"></category><category term="Website"></category><category term="SMU"></category><category term="University"></category></entry><entry><title>Gnuplotting, LaTeXing, and Other Made Up Verbs</title><link href="https://politicalphysicist.github.io/gnuplotting-latexing-and-other-made-up-verbs.html" rel="alternate"></link><published>2014-04-15T11:30:00+01:00</published><updated>2014-04-15T11:30:00+01:00</updated><author><name>C. MacMackin</name></author><id>tag:politicalphysicist.github.io,2014-04-15:gnuplotting-latexing-and-other-made-up-verbs.html</id><summary type="html">&lt;p&gt;Anyone who knows me in person and has seen me do any amount of work in
physics knows that my preferred graphing software is Gnuplot.&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt; 
This is a piece
of command-line plotting software capable of producing nearly every sort of graph
imaginable. In fact, it’s results have appeared on this blog before, and can 
be found in my &lt;a href="https://politicalphysicist.github.io/on-the-abuse-of-exponentiation-in-colloquial-communication.html"&gt;perfectly reasonable and not at all neurotic rant about exponential growth.&lt;/a&gt; 
It is capable of plotting data and
functions in any number of ways. Most importantly, in my mind, Gnuplot scripts can
be written which make it easy to produce many similar plots (batch processing).&lt;/p&gt;
&lt;p&gt;The only place where I’ve every really had a problem with Gnuplot is when it 
comes to including special characters and math in axis labels. Most frustrating of
all, if you are an astronomer, is the near impossibility of getting Gnuplot to 
produce the little symbol used for the sun (&lt;span class="math"&gt;\(\odot\)&lt;/span&gt;). All of this forces 
scientists to go to great length in order to make the labels on their plots look
vaguely decent. This is opposed to some other graphing programs, such as 
&lt;a href="http://home.gna.org/veusz/"&gt;Veusz&lt;/a&gt;, which are capable of using parts of the 
well-known &lt;span class="math"&gt;\(\LaTeX\)&lt;/span&gt; markup language to produce this sort of output. Thus,
a label such as &lt;span class="math"&gt;\(4\pi r^{2}~\[R_{\odot}\]\)&lt;/span&gt; can be produced with syntax as simple
as &lt;code&gt;4\pi r^{2}~[M_{\odot}]&lt;/code&gt;. While one of the formats that Gnuplot can output
is LaTeX, the quality of the resulting plot is terrible. Just look at the
figure below (a plot of some data and curves fit to that data from a recent
lab report).&lt;/p&gt;
&lt;figure&gt;&lt;img alt="LaTeX Gnuplot terminal in all of its ugly glory." src="https://politicalphysicist.github.io/images/gnuplotLatexBad.png"/&gt;&lt;figcaption&gt;LaTeX Gnuplot terminal in all of its ugly glory.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;However, there is another choice of output: the cairolatex terminal. This 
terminal, which is related to the pdfcairo terminal, actually produces two files.
One of these is a &lt;span class="caps"&gt;PDF&lt;/span&gt; or &lt;span class="caps"&gt;EPS&lt;/span&gt; file with the axes, data, and functions of the plot.
The other is a LaTeX
file which contains the information necessary to place labels on said plot.
The actual plot in this case is of far better quality, while labels are still
in LaTeX and can thus contain math, special characters, etc. Producing the
same plot as above using this terminal, we get a much better result.&lt;/p&gt;
&lt;figure&gt;&lt;img alt="cairolatex Gnuplot terminal." src="https://politicalphysicist.github.io/images/gnuplotLatex.png"/&gt;&lt;figcaption&gt;cairolatex Gnuplot terminal.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;The main disadvantage of this approach is that the LaTeX file must be compiled
before you can see the actual result. However, with the right settings and
a call to a LaTeX compiler at the end of your script, this problem is easily
surmountable. In order to make this easy, I’ve written myself a 
&lt;a href="https://politicalphysicist.github.io/attachments/Plot.gp"&gt;little template&lt;/a&gt;
Gnuplot script, with these features built in. Simply change the name of the output
file (without including any extension) on line nine and add the various setting
and plot commands that you need.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr/&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;Interestingly (or not), despite it’s name, Gnuplot has no affiliation with the &lt;a href="http://www.gnu.org/"&gt;&lt;span class="caps"&gt;GNU&lt;/span&gt;&lt;/a&gt; project whatsoever.  It is actually released under a more restrictive license than the &lt;span class="caps"&gt;GNU&lt;/span&gt; &lt;a href="http://www.gnu.org/licenses/gpl.html"&gt;&lt;span class="caps"&gt;GPL&lt;/span&gt;&lt;/a&gt;. &lt;a class="footnote-backref" href="#fnref:1" rev="footnote" title="Jump back to footnote 1 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</summary><category term="Gnuplot"></category><category term="LaTeX"></category><category term="Templates"></category><category term="Plotting"></category><category term="Software"></category></entry><entry><title>What I Did Over Christmas Break</title><link href="https://politicalphysicist.github.io/what-i-did-over-christmas-break.html" rel="alternate"></link><published>2013-12-21T02:00:00+00:00</published><updated>2013-12-21T02:00:00+00:00</updated><author><name>C. MacMackin</name></author><id>tag:politicalphysicist.github.io,2013-12-21:what-i-did-over-christmas-break.html</id><summary type="html">&lt;p&gt;&lt;em&gt;If you are impatient and don’t want to read my no doubt fascinating
account of the inspiration for and development process of the 
software I’ve designed, you can skip down to &lt;a href="#software"&gt;here&lt;/a&gt; to read what
it does and how to install it.&lt;/em&gt;&lt;/p&gt;
&lt;figure&gt;&lt;img alt="Conetroller icon" src="https://politicalphysicist.github.io/images/conetroller-icon.svg"/&gt;&lt;figcaption&gt;Conetroller icon&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;One of the many great things about Christmas time is the lack of homework.
It means that I finally have the chance to work on some of the little
personal projects that I’ve been wanting to do. One such project, of course,
is writing some blog posts. The other major project is the subject of this post.&lt;/p&gt;
&lt;p&gt;Thanks to the wonders of the Internet I now watch almost all movies and &lt;span class="caps"&gt;TV&lt;/span&gt;
shows on my computer. (And no, I am not downloading them illegally.) Well,
I say on my computer: actually &lt;em&gt;via&lt;/em&gt; my computer would be more accurate, as
I use an &lt;span class="caps"&gt;HDMI&lt;/span&gt; cable to play them on my television set. The problem with this arrangement is that it prevents me from using my computer for anything
else while the video is playing because:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The two monitor display features on my computer leave something to be desired.&lt;/li&gt;
&lt;li&gt;My computer has to stay on my desk, connected to the &lt;span class="caps"&gt;HDMI&lt;/span&gt; cable, which
is a terribly angle to actually see the &lt;span class="caps"&gt;TV&lt;/span&gt; from.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;However, it so happens that I have a spare &lt;a href="http://www.raspberrypi.org/"&gt;Raspberry Pi&lt;/a&gt; 
(a cheap mini-computer, one of which hosts this blog) and a spare &lt;span class="caps"&gt;HDMI&lt;/span&gt;
cable. It struck me that surely there was some way I could set up the 
Raspberry Pi to play my videos for me. After some reading I discovered
that the &lt;a href="http://www.videolan.org/vlc/index.html"&gt;&lt;span class="caps"&gt;VLC&lt;/span&gt; Media Player&lt;/a&gt; can
be controlled via a Telnet interface. For those of you who are not as
tech-savvy, Telnet is an old piece of software that can be used to 
remotely log onto computers in the command line. It long ago fell out of
favour due to security issues and has been replaced by software called 
&lt;span class="caps"&gt;SSH&lt;/span&gt;. However, as
I will only be accessing the Pi over my local network, security isn’t much
of an issue and Telnet will be fine.&lt;/p&gt;
&lt;p&gt;Now, I could simply log into &lt;span class="caps"&gt;VLC&lt;/span&gt; over Telnet and control it via the 
command line. This actually wouldn’t be so bad, but I felt like there were
nicer, tidier alternatives. So instead I set to work writing a program
in &lt;a href="http://www.python.org/"&gt;Python&lt;/a&gt; which could provide a graphical user
interface (&lt;span class="caps"&gt;GUI&lt;/span&gt;) for the Telnet controls. This was actually quite a new
experience for me, as almost all of my previous programming experience
has been in writing little scripts to process data and which have, at
most, a command line interface (although more often than not I just 
program my specifications directly into the code itself—so-called 
“hard-coding”). What little experience I have with GUIs has all been
for Windows, using a framework not available on Linux. So I had to 
learn how to work with a set of software libraries called &lt;span class="caps"&gt;GTK&lt;/span&gt;+ 3. 
&lt;a href="http://www.gtk.org/"&gt;&lt;span class="caps"&gt;GTK&lt;/span&gt;+&lt;/a&gt; is
one of the two major frameworks used to design GUIs on Linux, the other
being &lt;a href="http://qt-project.org/"&gt;&lt;span class="caps"&gt;QT&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;One thing that was nice is that there is a piece of software out there
called &lt;a href="https://glade.gnome.org/"&gt;Glade&lt;/a&gt; which allows you to design &lt;span class="caps"&gt;GTK&lt;/span&gt;
interfaces visually and
then import them into your code (rather than have to create the whole
interface using code only). It’s a bit rough around the edges, but 
certainly better than having to create the interface manually.&lt;/p&gt;
&lt;p&gt;&lt;a name="software"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;figure&gt;&lt;img alt="Conetroller interface" src="https://politicalphysicist.github.io/images/ConetrollerInterface.png"/&gt;&lt;figcaption&gt;Conetroller interface&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;And so, I now have a working piece of software that will allow you to
control a remote instance of &lt;span class="caps"&gt;VLC&lt;/span&gt;. So far I have only been able to test
it on an instance running on my own computer, but I see no reason why it
would work any differently if &lt;span class="caps"&gt;VLC&lt;/span&gt; is on a different machine. And thus,
I present to you: Conetroller v0.2.*&lt;/p&gt;
&lt;p&gt;I am posting the code &lt;a href="https://politicalphysicist.github.io/attachments/conetroller-0-2.tar.gz"&gt;for download here&lt;/a&gt;
, if anyone is interested. 
Currently it is only able to run on Linux (there’s a good chance it
would work on Mac &lt;span class="caps"&gt;OSX&lt;/span&gt; too), although it shouldn’t be too difficult to 
port it to Windows, if you want to. It can be installed by executing
the following in a terminal:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;wget redshadesofgreen.raspctl.com/attachments/conetroller-0-2.tar.gz&lt;/span&gt;
&lt;span class="go"&gt;tar -zxvf conetroller-0-2.tar.gz&lt;/span&gt;
&lt;span class="go"&gt;cd v0.2/&lt;/span&gt;
&lt;span class="go"&gt;sudo ./install.sh&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This installation technique is known to work in Linux Mint Debian 
Edition, and has not been tested anywhere else. However, I didn’t do anything too exotic
in terms of directory layout, so it should work with most Linux distributions,
and certainly most Debian-based distros (eg: Ubuntu). Make sure to take
a look at the &lt;span class="caps"&gt;README&lt;/span&gt; file. No other documentation is
provided, but the interface is pretty simple and you should be able to
figure it out. If you have any question or problems, post them in the 
comments section below.&lt;/p&gt;
&lt;p&gt;Current features include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Adding items to the playlist (using a &lt;span class="caps"&gt;URL&lt;/span&gt; or filepath)&lt;/li&gt;
&lt;li&gt;Clearing the playlist of items&lt;/li&gt;
&lt;li&gt;Play, pause, stop, skip forwards, and skip backwards buttons&lt;/li&gt;
&lt;li&gt;Displaying items currently on playlist&lt;/li&gt;
&lt;li&gt;Ability to scroll through video&lt;/li&gt;
&lt;li&gt;Recalling the most recent &lt;span class="caps"&gt;VLC&lt;/span&gt; instance logged into at the beginning of 
each session&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Bugs, missing features, and other short-comings:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;No indication is given as to which playlist item is currently being 
played (it is unclear if this can be added while using the Telnet interface)&lt;/li&gt;
&lt;li&gt;No ability to select an item from the playlist (likely will be added
in future versions)&lt;/li&gt;
&lt;li&gt;No ability to remember passwords (it would be insecure to store these
unencrypted in a plain text file, as was done with other login 
information). Future versions may include integration with Gnome Keyring
to overcome this.&lt;/li&gt;
&lt;li&gt;No comments included in the source code—I’ll fix this sooner or later,
although I think it should be fairly easy to follow even without them&lt;/li&gt;
&lt;li&gt;Possible overuse of global variables in the code, rather than passing
them to the relevant functions—this may be fixed in future, although
I blame some of the peculiarities of Glade for this&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Flaws aside, I am confident that Conetroller will prove useful to me,
and hope it can be useful to others as well.&lt;/p&gt;
&lt;p&gt;*For those that are unaware, the logo for &lt;span class="caps"&gt;VLC&lt;/span&gt; is a traffic cone. Since my
program controls &lt;span class="caps"&gt;VLC&lt;/span&gt;, Conetroller seemed like the only reasonable name for it.&lt;/p&gt;</summary><category term="Programming"></category><category term="VLC"></category><category term="Python"></category><category term="GTK+"></category><category term="Conetroller"></category></entry><entry><title>New Computer, New Linux Distribution</title><link href="https://politicalphysicist.github.io/new-computer-new-linux-distribution.html" rel="alternate"></link><published>2013-07-30T15:00:00+01:00</published><updated>2013-07-30T15:00:00+01:00</updated><author><name>C. MacMackin</name></author><id>tag:politicalphysicist.github.io,2013-07-30:new-computer-new-linux-distribution.html</id><summary type="html">&lt;p&gt;Well, my old laptop was dying. At least I think it was. In any case,
I wasn’t waiting around until the semester started to find out—better
to get a new computer now when I had time to get it configured properly.
And so, a week and a half ago I found myself with a brand new &lt;span class="caps"&gt;ASUS&lt;/span&gt; laptop.
It’s not actually an ultrabook but it is still pretty thin. It has a &lt;span class="caps"&gt;24GB&lt;/span&gt;
solid-state drive (more than enough to hold my operating system), a &lt;span class="caps"&gt;750GB&lt;/span&gt;
mechanical hard drive, an Intel i5 processor, an optical disc drive,
and a 14" screen. Overall I’m quite happy with my choice.&lt;/p&gt;
&lt;p&gt;The laptop came with Windows 8 installed. I was not having that. The 
choice now became what version of Linux to use. The obvious choice 
would have been &lt;a href="http://www.linuxmint.com/"&gt;Linux Mint&lt;/a&gt;, which I have 
used ever since moving to Linux. This distribution has the advantage of
being ready to use immediately after installation. I’m also very 
impressed by their &lt;a href="cinnamon.linuxmint.com"&gt;Cinnamon Desktop Environment&lt;/a&gt;.
However, the trade-off in a distribution being easy to use is that it
also somewhat inefficient when it comes to hardware usage. 
Additionally, in order to upgrade Linux Mint you must totally re-install
the operating system. To put it lightly, this is a frig.&lt;/p&gt;
&lt;p&gt;Another Linux distribution which I’d heard interesting things about is
called &lt;a href="https://www.archlinux.org/"&gt;Arch Linux&lt;/a&gt;. In a sense, Arch is the
polar opposite of Linux Mint. Once you’ve installed it, you have a 
command-line interface with a basic software set installed. And that’s
it. Everything else, including device drivers and a graphical interface,
you must install yourself. However, this ensures that there will be 
absolutely no bloat on your computer. Arch Linux also has the advantage
that you never have to install a new version of the operating system: all
of the components can be upgraded in exactly the same way that you’d upgrade
any other software. (For those who are familiar with Linux, this means 
that you just keep the &lt;span class="caps"&gt;OS&lt;/span&gt; up-to-date by applying the upgrade command
with the package-manager.) &lt;/p&gt;
&lt;p&gt;For some reason I decided that I wanted to give Arch a try. A big part
of the appeal is not having to re-install the &lt;span class="caps"&gt;OS&lt;/span&gt; for upgrades. I was also
enticed by the amount of control I’d be able to have over my system. And
I guess at the end of the day I wanted the challenge—I enjoy tinkering
with my computer, and I’d reached the limits of what I could do with Mint.
In other words, I chose it out of masochism. &lt;/p&gt;
&lt;p&gt;The installation process is considerably more complicated than that for
Linux Mint. However, in principle it isn’t too difficult, thanks to the
wonderful documentation provided. Unfortunately, my computer has one of
those awful new &lt;span class="caps"&gt;UEFI&lt;/span&gt; motherboards. This, combined with some feature
called “secure boot” meant that even getting my computer to detect the
installation disc was a struggle. Then, once I finally got Arch installed,
the &lt;span class="caps"&gt;UEFI&lt;/span&gt; boot-loader was convinced that there was no operating system
present. To be fair, I tried installing Linux Mint and encountered the
same problem. Several attempts later, I finally found a work-around that
got the boot-loader to see the operating systems.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Bow to me, for I am root" src="https://politicalphysicist.github.io/images/iamroot.jpg"/&gt; At this point I 
was past the worst. The next step was to create a new
account for myself. Initially when you install Linux (well, in more
traditional setups like Arch, anyway) there will only be one user, called
“root.” Root is capable of doing anything on the computer—it can delete
or edit any file. This is actually quite dangerous (giving rise to the
expressions “He who plays with root kills [file-]tree”) as you can
potentially delete something vital for the operation of your computer.
Thus it is best to create a separate account for every-day work
on the computer and only to use root when necessary (such as when installing
new software). Speaking of installing software, that was the next step.
First were the drivers for things like sound, video,
and my laptop’s trackpad. Next came a graphical user interface (&lt;span class="caps"&gt;GUI&lt;/span&gt;).
Linux uses the X Window System for this. However, all that X gives is the
ability for the computer to render graphical windows—you can’t do very
much with them by default, and you certainly won’t have a desktop with icons.
For that I needed to install a Desktop Environment.&lt;/p&gt;
&lt;p&gt;My first choice for a desktop environment was Cinnamon. It has a fairly
traditional layout (which I like—I don’t know why so many projects are
trying to force totally new interfaces on people) but modern looking
visual features. Unfortunately, Cinnamon’s behaviour with Arch was
distinctly underwhelming. There were numerous problems, but probably
the most frustrating was that I couldn’t get any of the applets (such as
the one which shows the weather) to work. Additionally, I realized how
tricky it can be to configure some of the visual elements of Cinnamon. On
Linux Mint this isn’t really a problem because most of the work is done 
for you in advance, but I couldn’t seem to get it looking quite the way I wanted on
Arch. So I gave up on Cinnamon.&lt;/p&gt;
&lt;p&gt;My second choice was &lt;a href="http://mate-desktop.org/"&gt;&lt;span class="caps"&gt;MATE&lt;/span&gt;&lt;/a&gt;.
&lt;span class="caps"&gt;MATE&lt;/span&gt; is a fork of an older desktop environment (now discontinued) called
&lt;span class="caps"&gt;GNOME&lt;/span&gt; 2. &lt;span class="caps"&gt;MATE&lt;/span&gt; was created when &lt;span class="caps"&gt;GNOME&lt;/span&gt; 2 was replaced by the horrendous 
&lt;span class="caps"&gt;GNOME&lt;/span&gt; 3. &lt;span class="caps"&gt;MATE&lt;/span&gt; doesn’t (by default) have quite the same level of prettiness
as Cinnamon, but on the other hand it is far easier to configure. So I
installed &lt;span class="caps"&gt;MATE&lt;/span&gt; and almost immediately realized that I could get rid of 
Cinnamon: all of &lt;span class="caps"&gt;MATE&lt;/span&gt;’s features worked immediately. So goodbye Cinnamon.
After installing a few more themes, &lt;span class="caps"&gt;MATE&lt;/span&gt; looked almost as good as 
Cinnamon, too!&lt;/p&gt;
&lt;p&gt;Finally I needed to install my preferred applications. It was the usual
sort of list: &lt;a href="http://www.libreoffice.org/"&gt;LibreOffice&lt;/a&gt;, 
&lt;a href="http://www.gnu.org/software/emacs/"&gt;emacs&lt;/a&gt;, &lt;a href="http://banshee.fm/"&gt;Banshee&lt;/a&gt;, 
&lt;a href="http://www.geany.org/"&gt;Geany&lt;/a&gt;, and &lt;a href="http://www.xm1math.net/texmaker/"&gt;Texmaker&lt;/a&gt;.
Perhaps my favourite feature of Arch Linux is the Arch User Repository.
This is a collection of source-code for software which would not be
popular enough (or is still too experimental) to warrant being maintained
in the official software repositories. However, Arch users can prepare
the source code themselves so that it can easily be compiled into a package
and then installed using the normal package manager. This means that there
are some obscure, but great, pieces of software which can be installed
with ease, such as a client for my &lt;a href="http://www.seafile.com/en/home/"&gt;Seafile&lt;/a&gt;
Cloud Server (an open source replacement for Dropbox) and 
&lt;a href="http://docs.getpelican.com/en/3.2/"&gt;Pelican&lt;/a&gt;, which I use to produce 
this blog. &lt;/p&gt;
&lt;p&gt;&lt;img alt="A screenshot of my desktop." src="http://redshadesofgreen.raspctl.com/static/images/ArchScreenshot.png" style="float:none;display:block;margin-left:auto;margin-right:auto"/&gt;&lt;/p&gt;
&lt;p&gt;And this brings me more-or-less to where I am now. While there are still
a few things I have left to do, at this point I have a fully functional
computer running Arch Linux.&lt;/p&gt;</summary><category term="Linux"></category><category term="Arch Linux"></category><category term="Laptop"></category><category term="MATE Desktop"></category></entry><entry><title>Hello World!</title><link href="https://politicalphysicist.github.io/hello-world.html" rel="alternate"></link><published>2013-06-29T23:50:00+01:00</published><updated>2013-06-29T23:50:00+01:00</updated><author><name>C. MacMackin</name></author><id>tag:politicalphysicist.github.io,2013-06-29:hello-world.html</id><summary type="html">&lt;p&gt;Well, I’ve decided to start a blog. Having set up a 
&lt;a href="http://www.raspberrypi.org/"&gt;Raspberry Pi&lt;/a&gt; as a webserver, I thought I’d try
setting up a blog on it. We’ll see how good I am at keeping it up to date.&lt;/p&gt;
&lt;p&gt;Originally I intended to write primarily about politics (the name of the 
blog describing where I fall politically). However, I’ve been going through
a bit of a slump lately, when it comes to politics. Eventually my passion
will come back, hopefully. But because of this, I’ll be talking about many
things. Among them:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Science&lt;/li&gt;
&lt;li&gt;Astronomy/Physics&lt;/li&gt;
&lt;li&gt;Socialism&lt;/li&gt;
&lt;li&gt;Politics&lt;/li&gt;
&lt;li&gt;Environmentalism&lt;/li&gt;
&lt;li&gt;Linux&lt;/li&gt;
&lt;li&gt;Computer Programming&lt;/li&gt;
&lt;li&gt;Being Gay&lt;/li&gt;
&lt;li&gt;Asperger’s Syndrome&lt;/li&gt;
&lt;li&gt;Musical Theatre&lt;/li&gt;
&lt;li&gt;My Life&lt;/li&gt;
&lt;li&gt;My Thoughts&lt;/li&gt;
&lt;li&gt;My Grumbling (which may be related to any or all of the above)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I hope that my writings will interest, challenge, amuse, educate, 
entertain, stimulate, and/or otherwise engage you. Enjoy reading!&lt;/p&gt;</summary><category term="Personal"></category><category term="Thoughts"></category><category term="Blogging"></category></entry></feed>